<?php
namespace Synapse\CoreBundle\Repository;

use Synapse\CoreBundle\Entity\Organizationrole;
use Synapse\RestBundle\Entity\Error;
use Doctrine\ORM\Query\Expr\Expr;
use Doctrine\ORM\Query\Expr\Join;
use Synapse\CoreBundle\Entity\Institution;

/**
 * InstitutionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InstitutionRepository extends SynapseRepository
{

    const REPOSITORY_KEY = 'SynapseCoreBundle:Institution';

    /**
     * @deprecated - Use Repository::REPOSITORY_KEY in the future.
     */
    private $institutionEntity = 'SynapseCoreBundle:Institution';

    const ORGN_LANGS = 'organizationlangs';

    const VALIDATION_ERR = "validation_error";

    public function findByStatus($status)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('p', 'o');
        $qb->from($this->institutionEntity, 'p');
        $qb->join('p.organizationlangs', 'o');
        $qb->where('p.status =:status');
        $qb->setParameter('status', $status);
        $query = $qb->getQuery();
        $result = $query->getArrayResult();
        $returnArray = array();
        if (count($result) > 0) {
            foreach ($result as $re) {
                $temp = array();
                if (isset($re[self::ORGN_LANGS])) {
                    $temp = $re[self::ORGN_LANGS][0];
                    unset($re[self::ORGN_LANGS]);
                }
                $returnArray[] = array_merge($re, $temp);
            }
        }
        
        return $returnArray;
    }

    public function findInstituion($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('p', 'o');
        $qb->from($this->institutionEntity, 'p');
        $qb->join('p.organizationlangs', 'o');
        $qb->where('p.id =:id');
        $qb->setParameter('id', $id);
        $query = $qb->getQuery();
        $result = $query->getArrayResult();
        $returnArray = array();
        if (count($result) > 0) {
            foreach ($result as $re) {
                $temp = array();
                if (isset($re[self::ORGN_LANGS])) {
                    $temp = $re[self::ORGN_LANGS][0];
                    unset($re[self::ORGN_LANGS]);
                }
                $returnArray[] = array_merge($re, $temp);
            }
        } else {
            $returnArray = null;
        }
        
        return $returnArray;
    }

    public function findStatusCount()
    {
        $em = $this->getEntityManager();
        $sql = "SELECT m.listname,count(p.status) as statuscount FROM SynapseCoreBundle:Institution p,SynapseCoreBundle:MetadataListValues m where p.status=m.listvalue group by p.status";
        $qb = $em->createQuery($sql);
        return $qb->getArrayResult();
    }

    /**
     * Get All Timezones According to the organizarion
     *
     * @param
     *            integer Organizatin Id
     * @return array List of timezones
     */
    public function getTimezones($organization_id)
    {
        $entity_manager = $this->getEntityManager();
        $query_bulder = $entity_manager->createQueryBuilder();
        $query_bulder->select('metavals.listname', 'metavals.listvalue')
            ->from('SynapseCoreBundle:MetadataListValues', 'metavals')
            ->join('metavals.metadataid', 'master')
            ->where('master.meta_key= :key')
            ->andWhere('master.organizationid= :organizationid')
            ->setParameters(array(
            'key' => 'Organization.TimeZone',
            'organizationid' => $organization_id
        ));
        
        $query = $query_bulder->getQuery();
        $result = $query->getArrayResult();
        if (count($result) <= 0) {
            $result = null;
        }
        return $result;
    }

    public function updateInstitution(Institution $institution)
    {
        $em = $this->getEntityManager();
        $inst = $em->getRepository($this->institutionEntity)->findOneBy(array(
            'id' => $institution->getId()
        ));
        if (! isset($inst)) {
            return new Error(self::VALIDATION_ERR, 'No Instituion found for id ' . $institution->getId());
        }
        
        $inst->setSubdomain($institution->getSubdomain());
        $inst->settimezone($institution->getTimezone());
        $em->flush();
        
        return true;
    }

    public function updateInstitutionAndReady(Institution $institution)
    {
        $em = $this->getEntityManager();
        $inst = $em->getRepository($this->institutionEntity)->findOneBy(array(
            'id' => $institution->getId()
        ));
        if (! isset($inst)) {
            return new Error(self::VALIDATION_ERR, 'No Instituion found for id ' . $institution->getId());
        }
        
        $inst->setSubdomain($institution->getSubdomain());
        $inst->settimezone($institution->getTimezone());
        $inst->setStatus('R');
        $em->flush();
        
        return true;
    }

    public function createOrganizationRole(Organizationrole $organizationrole)
    {
        $em = $this->getEntityManager();
        
        $em->persist($organizationrole);
        $em->flush();
        return $organizationrole;
    }

    public function findInstituionById($id)
    {
        $em = $this->getEntityManager();
        $inst = $em->getRepository($this->institutionEntity)->findOneBy(array(
            'id' => $id
        ));
        if (! isset($inst)) {
            return new Error(self::VALIDATION_ERR, "Instituion Not Found");
        }
        
        return $inst;
    }
}
