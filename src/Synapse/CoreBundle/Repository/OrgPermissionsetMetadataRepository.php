<?php
namespace Synapse\CoreBundle\Repository;

use PHPExperts\DoctrineDetectiveBundle\Services\QueryLogger;
use References\Fixture\ODM\MongoDB\Metadata;
use Synapse\CoreBundle\Entity\OrgPermissionsetMetadata;
use Synapse\CoreBundle\Exception\SynapseDatabaseException;
use Synapse\CoreBundle\Repository\SynapseRepository;
use Synapse\RestBundle\Exception\ValidationException;
use Synapse\CoreBundle\Util\Constants\SearchConstant;
use JMS\DiExtraBundle\Annotation as DI;

class OrgPermissionsetMetadataRepository extends SynapseRepository
{

    const REPOSITORY_KEY = 'SynapseCoreBundle:OrgPermissionsetMetadata';


    /**
     * Finds an OrgPermissionsetMetadata by its primary key / identifier.
     *
     * @param mixed $id The identifier.
     * @param int|null $lockMode One of the \Doctrine\DBAL\LockMode::* constants
     *                              or NULL if no specific lock mode should be used
     *                              during the search.
     * @param int|null $lockVersion The lock version.
     *
     * @return OrgPermissionsetMetadata|null The entity instance or NULL if the entity can not be found.
     */
    public function find($id, $lockMode = null, $lockVersion = null)
    {
        return parent::find($id, $lockMode, $lockVersion); // TODO: Change the autogenerated stub
    }


    /**
     * Finds OrgPermissionsetMetadatas by a set of criteria.
     *
     * @param array $criteria
     * @param array|null $orderBy
     * @param int|null $limit
     * @param int|null $offset
     *
     * @return OrgPermissionsetMetadata[]
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        return parent::findBy($criteria, $orderBy, $limit, $offset); // TODO: Change the autogenerated stub
    }


    /**
     * Finds a OrgPermissionsetMetadata by a set of criteria.
     *
     * @param array $criteria
     * @param array|null $orderBy
     *
     * @return OrgPermissionsetMetadata|null The entity instance or NULL if the entity can not be found.
     */
    public function findOneBy(array $criteria, array $orderBy = null)
    {
        return parent::findOneBy($criteria, $orderBy); // TODO: Change the autogenerated stub
    }


    public function remove($entity)
    {
        $this->getEntityManager()->remove($entity);
    }

    /**
     * Gets all ISPs a permissionset has access to in a given organization
     *
     * @param int $permissionsetId
     * @param int $organizationId
     * @return array
     */
    public function getIspsByPermissionSet($permissionsetId, $organizationId)
    {
        $parameters = ['organizationId' => $organizationId, 'permissionsetId' => $permissionsetId];
        $sql = "
                    SELECT
                        omd.id AS ispId,
                        omd.meta_key AS metaKey,
                        omd.meta_name AS ispLabel,
                        omd.meta_description AS ispDescription,
                        opmd.id IS NOT NULL AS ispSelection,
                        opmd.modified_at AS modifiedAt
                    FROM
                        org_metadata omd
                            INNER JOIN
                        org_permissionset_metadata opmd ON opmd.org_metadata_id = omd.id
                                                            AND opmd.organization_id = omd.organization_id
                    WHERE
                        omd.organization_id = :organizationId
                            AND omd.deleted_at IS NULL
                            AND opmd.deleted_at IS NULL
                            AND opmd.org_permissionset_id = :permissionsetId
                    ORDER BY omd.sequence;
            ";

        try {
            $results = $this->executeQueryFetchAll($sql, $parameters);

        } catch (\Exception $e) {
            throw new SynapseDatabaseException($e->getMessage() . ": " . $e->getTraceAsString());
        }

        return $results;
    }

    /**
     * get all isps a person has permission to view
     * with at least one student who has the profile item
     * (if you need query for ISPs regardless of students in the ISP use commit 98235c73)
     *
     * @param int $personId
     * @param int $organizationId
     * @return array|null
     */
    public function getAllISPsByPersonIdWithRelationToStudentAccess($personId, $organizationId){

        $parameters = ['organizationId' => $organizationId, 'personId' => $personId];
        $sql = "
SELECT DISTINCT
    opm.org_metadata_id AS id
FROM
    org_permissionset_metadata opm
        INNER JOIN
    (SELECT DISTINCT
        ofspm.permissionset_id, pom.org_metadata_id
    FROM
        org_faculty_student_permission_map ofspm
    INNER JOIN person_org_metadata pom ON pom.person_id = ofspm.student_id
    WHERE
        ofspm.faculty_id = :personId
            AND ofspm.org_id = :organizationId
            AND pom.deleted_at IS NULL) facultyStudentMap ON opm.org_permissionset_id = facultyStudentMap.permissionset_id
        AND facultyStudentMap.org_metadata_id = opm.org_metadata_id
WHERE
    opm.organization_id = :organizationId
        AND opm.deleted_at IS NULL
            ";

        try {
            $results = $this->executeQueryFetchAll($sql, $parameters);

        } catch (\Exception $e) {
            throw new SynapseDatabaseException($e->getMessage() . ": " . $e->getTraceAsString());
        }

        $results = array_column($results, 'id');
        return $results;
    }

    public function getAllMetadataIdByPermissions($permissionId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('IDENTITY(opd.orgMetadata) as profile_id');
        $qb->from('SynapseCoreBundle:OrgPermissionsetMetadata', 'opd');
        $qb->where('opd.orgPermissionset IN (:orgpermission)');
        
        $qb->setParameters([
            'orgpermission' => $permissionId
        ]);
        $resultSet = $qb->getQuery()->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
        return $resultSet;
    }


    /**
     * Returns a list of all ISP - group combinations for the given faculty member,
     * where the faculty member has access to the ISP (org_metadata) via the group's permission set.
     * Note: This function intentionally does not take group hierarchy into account.
     *
     * @param int $personId
     * @return array
     */
    public function getISPsAndGroupsForPerson($personId)
    {
        $sql = 'select opm.org_metadata_id, ogf.org_group_id
                from org_permissionset_metadata opm
                inner join org_group_faculty ogf on ogf.org_permissionset_id = opm.org_permissionset_id
                where opm.deleted_at is null
                and ogf.deleted_at is null
                and ogf.person_id = :personId
                order by opm.org_metadata_id, ogf.org_group_id;';

        try {
            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sql);
            $stmt->execute([':personId' => $personId]);

        } catch (\Exception $e) {
            throw new SynapseDatabaseException($e->getMessage() . ": " . $e->getTraceAsString());
        }

        return $stmt->fetchAll();
    }


    /**
     * Returns a list of all ISP - course combinations for the given faculty member,
     * where the faculty member has access to the ISP (org_metadata) via the course's permission set.
     *
     * @param int $personId
     * @return array
     */
    public function getISPsAndCoursesForPerson($personId)
    {
        $sql = 'select opm.org_metadata_id, ocf.org_courses_id
                from org_permissionset_metadata opm
                inner join org_course_faculty ocf on ocf.org_permissionset_id = opm.org_permissionset_id
                inner join org_courses oc on oc.id = ocf.org_courses_id
                inner join org_academic_terms oat on oat.id = oc.org_academic_terms_id and curdate() between oat.start_date and oat.end_date
                where opm.deleted_at is null
                and ocf.deleted_at is null
                and oc.deleted_at is null
                and oat.deleted_at is null
                and ocf.person_id = :personId
                order by opm.org_metadata_id, ocf.org_courses_id;';

        try {
            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sql);
            $stmt->execute([':personId' => $personId]);

        } catch (\Exception $e) {
            throw new SynapseDatabaseException($e->getMessage() . ": " . $e->getTraceAsString());
        }

        return $stmt->fetchAll();
    }


    /**
     * Returns an array of org_group_ids for all groups in which the given faculty member has a permission set
     * which includes the given ISP (org_metadata).
     * Note: This function intentionally does not take group hierarchy into account.
     *
     * @param int $personId
     * @param int $orgMetadataId
     * @return array
     */
    public function getGroupsWithPermissionToGivenIspForPerson($personId, $orgMetadataId)
    {
        $sql = 'select ogf.org_group_id
                from org_permissionset_metadata opm
                inner join org_group_faculty ogf on ogf.org_permissionset_id = opm.org_permissionset_id
                where opm.deleted_at is null
                and ogf.deleted_at is null
                and opm.org_metadata_id = :orgMetadataId
                and ogf.person_id = :personId;';

        try {
            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sql);
            $stmt->execute([':personId' => $personId, ':orgMetadataId' => $orgMetadataId]);

        } catch (\Exception $e) {
            throw new SynapseDatabaseException($e->getMessage() . ": " . $e->getTraceAsString());
        }

        $results = $stmt->fetchAll();
        $results = array_map('current', $results);      // un-nest the array
        return $results;
    }


    /**
     * Returns an array of org_courses_ids for all current courses in which the given faculty member has a permission set
     * which includes the given ISP (org_metadata).
     *
     * @param int $personId
     * @param int $orgMetadataId
     * @return array
     */
    public function getCoursesWithPermissionToGivenIspForPerson($personId, $orgMetadataId)
    {
        $sql = 'select ocf.org_courses_id
                from org_permissionset_metadata opm
                inner join org_course_faculty ocf on ocf.org_permissionset_id = opm.org_permissionset_id
                inner join org_courses oc on oc.id = ocf.org_courses_id
                inner join org_academic_terms oat on oat.id = oc.org_academic_terms_id and curdate() between oat.start_date and oat.end_date
                where opm.deleted_at is null
                and ocf.deleted_at is null
                and oc.deleted_at is null
                and oat.deleted_at is null
                and opm.org_metadata_id = :orgMetadataId
                and ocf.person_id = :personId;';

        try {
            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sql);
            $stmt->execute([':personId' => $personId, ':orgMetadataId' => $orgMetadataId]);

        } catch (\Exception $e) {
            throw new SynapseDatabaseException($e->getMessage() . ": " . $e->getTraceAsString());
        }

        $results = $stmt->fetchAll();
        $results = array_map('current', $results);      // un-nest the array
        return $results;
    }
}
