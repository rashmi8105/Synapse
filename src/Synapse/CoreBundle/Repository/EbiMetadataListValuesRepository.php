<?php
namespace Synapse\CoreBundle\Repository;

/**
 * xListValuesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\ORM\Query\Expr\Expr;
use Doctrine\ORM\Query\Expr\Join;
use SebastianBergmann\Exporter\Exception;
use Synapse\CoreBundle\Entity\EbiMetadataListValues;
use Synapse\CoreBundle\Exception\SynapseDatabaseException;
use Synapse\RestBundle\Entity\Error;

class EbiMetadataListValuesRepository extends SynapseRepository
{

    const REPOSITORY_KEY = 'SynapseCoreBundle:EbiMetadataListValues';

    public function create(EbiMetadataListValues $ebiMetaDataListValues)
    {
        $em = $this->getEntityManager();
        $em->persist($ebiMetaDataListValues);
        return $ebiMetaDataListValues;
    }

    public function remove(EbiMetadataListValues $ebiMetaDataListValues)
    {
        $em = $this->getEntityManager();
        $em->remove($ebiMetaDataListValues);
    }

    /**
     * Get All Timezones
     *
     * @return array List of timezones
     */
    public function getTimezones()
    {
        $entity_manager = $this->getEntityManager();

        $query_bulder = $entity_manager->createQueryBuilder();
        $query_bulder->select('metavals.listName as timezone_name', 'metavals.listValue as timezone')
            ->from('SynapseCoreBundle:EbiMetadataListValues', 'metavals')
            ->join('metavals.metadata', 'master')
            ->where('master.key= :key')
            ->setParameters(array(
            'key' => 'System_timezones'
        ));
        $query = $query_bulder->getQuery();
        $result = $query->getArrayResult();

        if (count($result) <= 0) {
            $result = null;
        }
        return $result;
    }

    public function getListValues($metadataid, $listvalue)
    {
        $entity_manager = $this->getEntityManager();

        $query_bulder = $entity_manager->createQueryBuilder();
        $query_bulder->select('metavals.listName as listName')
            ->from('SynapseCoreBundle:EbiMetadataListValues', 'metavals')
            ->
        where('metavals.ebiMetadata= :key AND metavals.listValue = :listValue')
            ->setParameters(array(
            'key' => $metadataid,
            'listValue' => $listvalue
        ));
        $query = $query_bulder->getQuery();
        $result = $query->getArrayResult();

        return $result;
    }


    /**
     * Returns a lookup table of options for the given (categorical) ebi metadata,
     * where the key is the numeric list_value and the value is the corresponding list_name.
     *
     * @param int $ebiMetadataId
     * @return array
     * @throws SynapseDatabaseException
     */
    public function getListValuesAndNamesForEbiMetadata($ebiMetadataId)
    {
        $sql = 'select list_name, list_value
                from ebi_metadata_list_values
                where ebi_metadata_id = :ebiMetadataId
                and deleted_at is null
                order by list_value + 0;';      // order them as numbers, not as strings

        try {
            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sql);
            $stmt->execute([':ebiMetadataId' => $ebiMetadataId]);

        } catch (\Exception $e) {
            throw new SynapseDatabaseException($e->getMessage() . ": " . $e->getTraceAsString());
        }

        $records = $stmt->fetchAll();
        $lookupTable = [];
        foreach ($records as $record) {
            $lookupTable[$record['list_value']] = $record['list_name'];
        }

        return $lookupTable;
    }
}