<?php
namespace Synapse\CoreBundle\Repository;

use Synapse\CoreBundle\Entity\WessLink;
use Synapse\CoreBundle\Exception\SynapseDatabaseException;

/**
 * SurveyLangRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SurveyLangRepository extends SynapseRepository
{

    const REPOSITORY_KEY = 'SynapseCoreBundle:SurveyLang';

    /**
     * Gets survey names based on organizationId, if organizationId is null then will get all survey names
     *
     * @param int $organizationId The organization to get the surveys for
     * @return array Array of survey metadata for this given organization
     * @throws SynapseDatabaseException
     */
    public function getAllSurveys($organizationId = null)
    {
        $organizationJoinQueryString = '';
        $parameters = [];
        if ($organizationId) {
            $organizationJoinQueryString = ' AND wl.open_date <= NOW()
                                             AND wl.org_id = :organizationId ';

            $parameters = ["organizationId" => $organizationId];
        }

        // GROUP_CONCAT is safe to use in below query,it wonâ€™t go over 1028 characters.
        $sql = "SELECT
                    s.id,
                    wl.survey_id,
                    sl.name AS survey_name,
                    sl.lang_id,
                    GROUP_CONCAT(DISTINCT (wl.cohort_code)
                        ORDER BY wl.cohort_code) AS all_cohorts,
                    wl.year_id,
                    wl.status,
                    wl.open_date,
                    wl.close_date
                FROM
                    survey s
                        INNER JOIN
                    survey_lang sl ON sl.survey_id = s.id
                        INNER JOIN
                    wess_link wl ON wl.survey_id = sl.survey_id
                    $organizationJoinQueryString
                GROUP BY s.id
                ORDER BY wl.open_date DESC";

        try {
            $em = $this->getEntityManager();
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute($parameters);
            $results = $statement->fetchAll();
        } catch (\Exception $e) {
            throw new SynapseDatabaseException($e->getMessage() . ": " . $e->getTraceAsString());
        }
        return $results;
    }

    public function getRecentSurvey($orgId = null, $langId = 1)
    {


        $em = $this->getEntityManager();
        $whereAdd = '';
        if ($orgId) {
            $whereAdd = " and wl.open_date <= now() and wl.org_id = $orgId ";
        }
        $sql = "select s.id, sl.name as survey_name, sl.lang_id, group_concat(distinct(wl.cohort_code) ORDER BY wl.cohort_code) as all_cohorts,
        wl.year_id, wl.status, max(wl.open_date) as open_date , wl.close_date
        from survey as s
        inner join survey_lang as sl on sl.survey_id = s.id and sl.lang_id=$langId
        inner join wess_link as wl on wl.survey_id = sl.survey_id $whereAdd
        group by s.id order by open_date desc LIMIT 1";

        $resultSet = $em->getConnection()->fetchAll($sql);
        return $resultSet;

    }

    /**
     * Finds a single entity by a set of criteria.
     *
     * @param array $criteria
     * @param SynapseException $exception
     * @param array|null $orderBy
     *
     * @return SurveyLang|null
     */
    public function findOneBy(array $criteria, $exception = null, array $orderBy = null)
    {
        $object = parent::findOneBy($criteria, $orderBy);
        return $this->doesObjectExist($object, $exception);
    }
}
