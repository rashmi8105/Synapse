<?php

use Codeception\TestCase\Test;

class PredefinedSearchDAOTest extends Test
{
    use Codeception\Specify;


    private $inProgressGradesDOrBelow = ['D', 'F'];

    private $inProgressGradesCOrBelow = ['C', 'D', 'F'];

    private $finalGradesDOrBelow = ['D+', 'D', 'D-', 'F/No Pass'];

    private $finalGradesCOrBelow = ['C+', 'C', 'C-', 'D+', 'D', 'D-', 'F/No Pass'];

    /**
     * @var \Symfony\Component\DependencyInjection\Container
     */
    private $container;

    /**
     * @var \Synapse\SearchBundle\DAO\PredefinedSearchDAO
     */
    private $predefinedSearchDAO;


    public function _before()
    {
        $this->container = $this->getModule('Symfony2')->kernel->getContainer();
        $this->predefinedSearchDAO = $this->container->get('predefined_search_dao');
    }


    public function testGetAllMyStudents()
    {
        $this->specify("Verify the functionality of the method getAllMyStudents", function ($facultyId, $organizationId, $orgAcademicYearId, $onlyIncludeActiveStudents, $requireRiskPermission, $expectedResult) {
            $result = $this->predefinedSearchDAO->getAllMyStudents($facultyId, $organizationId, $orgAcademicYearId, $onlyIncludeActiveStudents, $requireRiskPermission);
            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));


        }, ["examples" =>
            [
                // Example 1:  count: 424
                [256048, 189, 33, false, false, [4672299, 4672300, 4672373, 4672374, 4672375, 4672376, 4672377, 4672378, 4672379, 4672380, 4672381, 4672382, 4672383, 4672384, 4672385, 4672386, 4672387, 4672388, 4672389, 4672390, 4672391, 4672392, 4672393, 4672394, 4672395, 4672396, 4672397, 4672398, 4672399, 4672400, 4672401, 4672402, 4672403, 4672404, 4672406, 4672407, 4672408, 4672409, 4672410, 4672411, 4672412, 4672413, 4672414, 4672415, 4672416, 4672417, 4672418, 4672419, 4672420, 4672421, 4672422, 4672423, 4672424, 4672425, 4672426, 4672427, 4672428, 4672429, 4672430, 4672431, 4672432, 4672433, 4672434, 4672435, 4672436, 4672437, 4672438, 4672439, 4672440, 4672441, 4672442, 4672443, 4672444, 4672445, 4672446, 4672447, 4672448, 4672449, 4672450, 4672451, 4672452, 4672453, 4672454, 4672455, 4672456, 4672457, 4672458, 4672459, 4672460, 4672462, 4672463, 4672464, 4672465, 4672466, 4672467, 4672468, 4672469, 4672470, 4672471, 4672472, 4672473, 4672474, 4672475, 4672476, 4672477, 4672478, 4672479, 4672480, 4672481, 4672482, 4672483, 4672484, 4672485, 4672486, 4672487, 4672488, 4672489, 4672490, 4672492, 4672493, 4672494, 4672495, 4672496, 4672497, 4672498, 4672499, 4672500, 4672501, 4672502, 4672503, 4672504, 4672505, 4672506, 4672507, 4672508, 4672509, 4672510, 4672511, 4672512, 4672513, 4672514, 4672515, 4672516, 4672517, 4672519, 4672520, 4672521, 4672522, 4672523, 4672524, 4672525, 4672526, 4672527, 4672528, 4672529, 4672530, 4672531, 4672532, 4672533, 4672534, 4672535, 4672536, 4672537, 4672538, 4672539, 4672540, 4672541, 4672542, 4672543, 4672544, 4672545, 4672546, 4672547, 4672548, 4672549, 4672550, 4672551, 4672552, 4672553, 4672554, 4672555, 4672556, 4672557, 4672558, 4672559, 4672560, 4672561, 4672562, 4672563, 4672564, 4672565, 4672566, 4672567, 4672568, 4672569, 4672570, 4672571, 4672572, 4672573, 4672574, 4672575, 4672576, 4672577, 4672578, 4672579, 4672580, 4672581, 4672582, 4672583, 4672584, 4672585, 4672586, 4672587, 4672588, 4672590, 4672591, 4672592, 4672593, 4672594, 4672595, 4672597, 4672598, 4672599, 4672600, 4672601, 4672602, 4672603, 4672604, 4672605, 4672606, 4672607, 4672608, 4672609, 4672610, 4672611, 4672612, 4672613, 4672614, 4672615, 4672616, 4672617, 4672618, 4672619, 4672620, 4672621, 4672622, 4672623, 4672624, 4672625, 4672626, 4672627, 4672628, 4672629, 4672630, 4672631, 4672632, 4672633, 4672634, 4672635, 4672636, 4672637, 4672638, 4672639, 4672640, 4672641, 4672642, 4672643, 4672644, 4672645, 4672646, 4672647, 4672650, 4672652, 4672653, 4672654, 4672655, 4672656, 4672657, 4672658, 4672659, 4672660, 4672661, 4672662, 4672663, 4672664, 4672665, 4672666, 4672667, 4672668, 4672669, 4672670, 4672671, 4672672, 4672673, 4672674, 4672675, 4672676, 4672677, 4672678, 4672679, 4672680, 4672681, 4672682, 4672683, 4672684, 4672685, 4672686, 4672687, 4672688, 4672689, 4672690, 4672691, 4672692, 4672693, 4672694, 4672695, 4672697, 4672698, 4672699, 4672700, 4672701, 4672702, 4672703, 4672704, 4672705, 4672706, 4672707, 4672708, 4672709, 4672710, 4672711, 4672712, 4672713, 4672714, 4672715, 4672716, 4672717, 4672718, 4672719, 4672720, 4672721, 4672722, 4672723, 4672724, 4672725, 4672726, 4672727, 4672728, 4672729, 4672730, 4672731, 4672732, 4672733, 4672734, 4672735, 4672736, 4672737, 4672738, 4672739, 4672740, 4672741, 4672742, 4672743, 4672744, 4672745, 4672746, 4672747, 4672748, 4672749, 4672750, 4672751, 4672752, 4672753, 4672754, 4672755, 4672756, 4672757, 4672758, 4672759, 4672760, 4672761, 4672762, 4672764, 4672765, 4672766, 4672767, 4672768, 4799582, 4799583, 4799584, 4799585, 4878410, 4878411, 4878412, 4878413, 4878414, 4878415, 4878416, 4878417, 4878418, 4878419, 4878420, 4878421, 4878422, 4878423, 4878424, 4878425, 4878426, 4878427, 4878428, 4878429, 4878430, 4878431, 4878432, 4878433, 4878434, 4878435, 4878436, 4878437, 4878439, 4878440, 4878441, 4878442, 4878443]],
                // Example 2:  count: 257
                [12175, 62, 48, false, false, [140686, 189730, 233137, 233157, 256294, 256797, 256798, 261890, 261907, 262083, 276115, 276197, 276213, 276219, 276220, 276261, 276347, 276358, 276410, 276436, 276445, 276470, 276512, 276520, 276532, 276570, 379002, 379097, 379218, 379589, 379697, 379961, 380051, 380134, 380157, 380490, 380722, 380749, 381042, 381091, 381184, 381239, 381835, 382118, 387181, 387188, 387249, 388026, 388741, 388838, 390371, 639205, 725314, 725351, 725399, 725479, 725635, 725714, 725868, 725980, 725982, 726019, 726166, 726202, 726262, 740827, 741347, 741499, 741551, 741572, 741632, 741788, 741792, 742272, 742601, 742686, 742871, 742873, 743452, 743630, 743745, 743884, 744195, 744351, 744476, 747702, 748642, 748742, 749100, 749473, 901946, 901991, 902011, 902019, 902039, 902051, 902057, 902061, 902071, 902092, 902100, 902118, 902125, 902128, 902130, 902138, 902139, 902143, 902156, 1035141, 1035449, 1035480, 1036106, 1036116, 1036170, 1036178, 1036186, 1036206, 1036238, 1036299, 1036383, 1036384, 1036405, 1036463, 1036500, 1036539, 1036551, 1036594, 1036640, 1036645, 1036670, 1036939, 1037176, 1037394, 1037551, 1037676, 1037749, 1037873, 1038080, 1038112, 1038118, 1038125, 1038163, 1038910, 1038914, 1038995, 1039017, 1039075, 1039217, 1039266, 1039308, 1039456, 1039484, 1039508, 1039798, 1039974, 1040071, 1040562, 1040572, 1040661, 1040690, 1040737, 1194988, 1195060, 1195116, 1195133, 1195255, 1195279, 1195452, 1195479, 1195509, 4673385, 4673401, 4673771, 4674171, 4674551, 4674700, 4674918, 4674946, 4674998, 4675056, 4675090, 4675122, 4675131, 4675138, 4675438, 4675639, 4675650, 4675656, 4675709, 4676116, 4676467, 4676747, 4677010, 4677075, 4677131, 4677206, 4677432, 4677743, 4677853, 4677930, 4677941, 4678069, 4678156, 4678344, 4678528, 4678529, 4678870, 4678876, 4678908, 4678946, 4679293, 4679433, 4679450, 4679497, 4711762, 4711788, 4712066, 4712343, 4712370, 4712613, 4712701, 4712798, 4713208, 4713927, 4714065, 4714543, 4714748, 4714853, 4715157, 4715631, 4715668, 4715710, 4715784, 4715976, 4715977, 4716194, 4716607, 4716807, 4716962, 4716972, 4717003, 4717110, 4717447, 4717459, 4717465, 4718082, 4718137, 4718147, 4718281, 4718448, 4718709, 4718768, 4718842, 4719446, 4719640, 4719823]],
                // Example 3:  count: 233 -- only the active students from the previous example
                [12175, 62, 48, true, true, [189730, 233157, 256294, 256797, 256798, 262083, 276115, 276197, 276213, 276219, 276220, 276261, 276347, 276358, 276410, 276436, 276445, 276512, 276520, 276532, 276570, 379002, 379097, 379218, 379589, 379961, 380051, 380134, 380157, 380490, 380722, 380749, 381042, 381091, 381184, 381239, 381835, 382118, 387181, 387188, 387249, 388026, 388741, 388838, 639205, 725314, 725351, 725399, 725479, 725635, 725714, 725868, 725980, 725982, 726019, 726166, 726202, 726262, 740827, 741347, 741499, 741551, 741572, 741632, 741788, 741792, 742272, 742601, 742686, 742871, 742873, 743452, 743630, 743745, 744195, 744351, 744476, 747702, 748642, 748742, 749100, 749473, 901946, 901991, 902011, 902019, 902039, 902051, 902057, 902061, 902071, 902100, 902118, 902130, 902138, 902143, 902156, 1035141, 1035449, 1035480, 1036106, 1036116, 1036170, 1036178, 1036186, 1036238, 1036299, 1036383, 1036384, 1036405, 1036463, 1036500, 1036539, 1036551, 1036594, 1036640, 1036645, 1036670, 1036939, 1037176, 1037394, 1037551, 1037676, 1037749, 1037873, 1038080, 1038112, 1038118, 1038125, 1038163, 1038910, 1038914, 1038995, 1039017, 1039075, 1039217, 1039266, 1039308, 1039456, 1039484, 1039508, 1039798, 1039974, 1040071, 1040562, 1040572, 1040661, 1040690, 1040737, 1194988, 1195060, 1195116, 1195255, 1195279, 1195479, 4673385, 4673401, 4673771, 4674171, 4674551, 4674700, 4674918, 4674946, 4674998, 4675056, 4675090, 4675122, 4675131, 4675138, 4675438, 4675639, 4675650, 4675656, 4675709, 4676116, 4676467, 4676747, 4677010, 4677075, 4677131, 4677206, 4677432, 4677743, 4677930, 4677941, 4678069, 4678156, 4678344, 4678528, 4678529, 4678870, 4678876, 4678908, 4678946, 4679293, 4679433, 4679450, 4679497, 4711788, 4712066, 4712343, 4712613, 4712798, 4713208, 4713927, 4714065, 4714748, 4714853, 4715157, 4715631, 4715668, 4715710, 4715784, 4715976, 4715977, 4716194, 4716607, 4716807, 4716962, 4716972, 4717003, 4717110, 4717447, 4717459, 4717465, 4718137, 4718147, 4718281, 4718709, 4718768, 4719446, 4719640, 233137, 261890, 261907, 276470, 379697, 390371, 743884, 902092, 902125, 902128, 902139, 1036206, 1195133, 1195452, 1195509, 4677853, 4711762, 4712370, 4712701, 4714543, 4718082, 4718448, 4718842, 140686, 4719823]]

            ]
        ]);
    }


    public function testGetMyPrimaryCampusConnections()
    {
        $this->specify("Verify the functionality of the method getMyPrimaryCampusConnections", function ($facultyId, $organizationId, $orgAcademicYearId, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getMyPrimaryCampusConnections($facultyId, $organizationId, $orgAcademicYearId, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1:  count: 0
                [256048, 189, 33, [], false],
                // Example 2:  count: 39
                [12175, 62, 48, [1035141, 1035449, 1035480, 1036106, 1036116, 1036170, 1036186, 1036299, 1036383, 1036384, 1036405, 1036500, 1036551, 1036594, 1036640, 1036670, 1037394, 1037551, 1037749, 1038080, 1038112, 1038118, 1038125, 1038163, 1038910, 1038914, 1038995, 1039017, 1039075, 1039266, 1039456, 1039484, 1039798, 1039974, 1040071, 1040572, 1040661, 1040690, 1040737], false],
                // Example 3:  count: 39 - only the active students from the previous example
                [12175, 62, 48, [1035141, 1035449, 1035480, 1036106, 1036116, 1036170, 1036186, 1036299, 1036383, 1036384, 1036405, 1036500, 1036551, 1036594, 1036640, 1036670, 1037394, 1037551, 1037749, 1038080, 1038112, 1038118, 1038125, 1038163, 1038910, 1038914, 1038995, 1039017, 1039075, 1039266, 1039456, 1039484, 1039798, 1039974, 1040071, 1040572, 1040661, 1040690, 1040737], true]

            ]
        ]);
    }


    public function testGetAtRiskStudents()
    {
        $this->specify("Verify the functionality of the method getAtRiskStudents", function ($facultyId, $organizationId, $orgAcademicYearId, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getAtRiskStudents($facultyId, $organizationId, $orgAcademicYearId, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1:  count: 25
                [256048, 189, 33, [4672378, 4672386, 4672415, 4672424, 4672439, 4672487, 4672490, 4672505, 4672508, 4672528, 4672581, 4672613, 4672622, 4672653, 4672669, 4672686, 4799584, 4878417, 4878423, 4878426, 4878427, 4878432, 4878435, 4878436, 4878443], false],
                // Example 1:  count: 25 -- only the active students from the previous example
                [256048, 189, 33, [4672378, 4672386, 4672415, 4672424, 4672439, 4672487, 4672490, 4672505, 4672508, 4672528, 4672581, 4672613, 4672622, 4672653, 4672669, 4672686, 4799584, 4878417, 4878423, 4878426, 4878427, 4878432, 4878435, 4878436, 4878443], true]
            ]
        ]);
    }


    public function testGetStudentsWithSpecifiedRiskColor()
    {
        $this->specify("Verify the functionality of the method getStudentsWithSpecifiedRiskColor", function ($facultyId, $organizationId, $riskColor, $orgAcademicYearId, $onlyIncludeActiveStudents, $expectedResult) {

            $result = $this->predefinedSearchDAO->getStudentsWithSpecifiedRiskColor($facultyId, $organizationId, $riskColor, $orgAcademicYearId, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1:  count: 9
                [256048, 189, 'red2', 33, false, [4672378, 4672424, 4672490, 4799584, 4878417, 4878423, 4878432, 4878436, 4878443]],
                // Example 2:  count: 16
                [256048, 189, 'red', 33, false, [4672386, 4672415, 4672439, 4672487, 4672505, 4672508, 4672528, 4672581, 4672613, 4672622, 4672653, 4672669, 4672686, 4878426, 4878427, 4878435]],
                // Example 3:  count: 16
                [256048, 189, 'yellow', 33, false, [4672391, 4672438, 4672447, 4672511, 4672520, 4672590, 4672623, 4672627, 4672642, 4672666, 4672674, 4672700, 4672722, 4878425, 4878428, 4878433]],
                // Example 4:  count: 237
                [256048, 189, 'green', 33, false, [4672379, 4672380, 4672381, 4672383, 4672384, 4672385, 4672387, 4672392, 4672394, 4672395, 4672396, 4672397, 4672398, 4672400, 4672401, 4672402, 4672404, 4672406, 4672407, 4672408, 4672411, 4672412, 4672413, 4672414, 4672416, 4672417, 4672418, 4672419, 4672421, 4672422, 4672425, 4672427, 4672428, 4672432, 4672433, 4672434, 4672435, 4672437, 4672440, 4672441, 4672442, 4672446, 4672448, 4672450, 4672452, 4672453, 4672455, 4672456, 4672457, 4672460, 4672462, 4672463, 4672464, 4672465, 4672466, 4672467, 4672470, 4672471, 4672475, 4672476, 4672477, 4672479, 4672480, 4672481, 4672489, 4672492, 4672493, 4672494, 4672495, 4672496, 4672497, 4672498, 4672503, 4672504, 4672506, 4672507, 4672512, 4672513, 4672514, 4672515, 4672516, 4672519, 4672521, 4672522, 4672526, 4672530, 4672531, 4672533, 4672535, 4672540, 4672541, 4672542, 4672543, 4672544, 4672546, 4672547, 4672548, 4672552, 4672555, 4672557, 4672559, 4672560, 4672564, 4672568, 4672569, 4672570, 4672571, 4672572, 4672574, 4672576, 4672577, 4672583, 4672584, 4672585, 4672587, 4672591, 4672592, 4672594, 4672595, 4672597, 4672599, 4672600, 4672604, 4672605, 4672606, 4672608, 4672609, 4672610, 4672611, 4672612, 4672614, 4672617, 4672619, 4672620, 4672624, 4672625, 4672626, 4672629, 4672630, 4672632, 4672635, 4672636, 4672638, 4672639, 4672640, 4672643, 4672645, 4672647, 4672652, 4672654, 4672655, 4672660, 4672661, 4672662, 4672663, 4672664, 4672665, 4672667, 4672668, 4672670, 4672673, 4672676, 4672677, 4672678, 4672679, 4672681, 4672684, 4672687, 4672688, 4672689, 4672690, 4672692, 4672693, 4672695, 4672697, 4672698, 4672699, 4672701, 4672702, 4672703, 4672706, 4672707, 4672709, 4672710, 4672711, 4672714, 4672716, 4672717, 4672718, 4672719, 4672720, 4672723, 4672726, 4672729, 4672731, 4672732, 4672733, 4672735, 4672736, 4672737, 4672738, 4672743, 4672744, 4672745, 4672747, 4672748, 4672749, 4672750, 4672751, 4672752, 4672753, 4672754, 4672755, 4672759, 4672760, 4672762, 4672764, 4799582, 4799583, 4799585, 4878413, 4878415, 4878416, 4878418, 4878419, 4878421, 4878422, 4878424, 4878429, 4878430, 4878431, 4878434, 4878437, 4878439, 4878440, 4878441, 4878442]],
                // Example 5a:  Including both active and inactive students (count: 17)
                [12175, 62, 'red2', 48, false, [1035480, 1036500, 1036640, 1037551, 1040737, 4674551, 4675056, 4675122, 4675650, 4678069, 4678156, 4678870, 4679433, 4679450, 4716807, 4717003, 4711762]],
                // Example 5b:  Including only active students (count: 16)
                [12175, 62, 'red2', 48, true, [1035480, 1036500, 1036640, 1037551, 1040737, 4674551, 4675056, 4675122, 4675650, 4678069, 4678156, 4678870, 4679433, 4679450, 4716807, 4717003, 4711762]],
                // Example 6 : Invalid  academic year id then it should not return any students
                [256048, 189, 'red2', 0, false, []],
            ]
        ]);
    }


    public function testGetStudentsWithGrayRisk()
    {
        $this->specify("Verify the functionality of the method getStudentsWithGrayRisk", function ($facultyId, $organizationId, $orgAcademicYearId, $onlyIncludeActiveStudents, $expectedResult) {

            $result = $this->predefinedSearchDAO->getStudentsWithGrayRisk($facultyId, $organizationId, $orgAcademicYearId, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1:  count: 146
                [256048, 189, 33, false, [4672299, 4672300, 4672373, 4672374, 4672375, 4672376, 4672377, 4672382, 4672388, 4672389, 4672390, 4672393, 4672399, 4672403, 4672409, 4672410, 4672420, 4672423, 4672426, 4672429, 4672430, 4672431, 4672436, 4672443, 4672444, 4672445, 4672449, 4672451, 4672454, 4672458, 4672459, 4672468, 4672469, 4672472, 4672473, 4672474, 4672478, 4672482, 4672483, 4672484, 4672485, 4672486, 4672488, 4672499, 4672500, 4672501, 4672502, 4672509, 4672510, 4672517, 4672523, 4672524, 4672525, 4672527, 4672529, 4672532, 4672534, 4672536, 4672537, 4672538, 4672539, 4672545, 4672549, 4672550, 4672551, 4672553, 4672554, 4672556, 4672558, 4672561, 4672562, 4672563, 4672565, 4672566, 4672567, 4672573, 4672575, 4672578, 4672579, 4672580, 4672582, 4672586, 4672588, 4672593, 4672598, 4672601, 4672602, 4672603, 4672607, 4672615, 4672616, 4672618, 4672621, 4672628, 4672631, 4672633, 4672634, 4672637, 4672641, 4672644, 4672646, 4672650, 4672656, 4672657, 4672658, 4672659, 4672671, 4672672, 4672675, 4672680, 4672682, 4672683, 4672685, 4672691, 4672694, 4672704, 4672705, 4672708, 4672712, 4672713, 4672715, 4672721, 4672724, 4672725, 4672727, 4672728, 4672730, 4672734, 4672739, 4672740, 4672741, 4672742, 4672746, 4672756, 4672757, 4672758, 4672761, 4672765, 4672766, 4672767, 4672768, 4878410, 4878411, 4878412, 4878414, 4878420]],
                // Example 2a:  Including both active and inactive students (count: 129)
                [12175, 62, 48, false, [140686, 189730, 233137, 233157, 256797, 256798, 261890, 261907, 276115, 276197, 276213, 276219, 276220, 276261, 276347, 276358, 276410, 276436, 276445, 276470, 276512, 276520, 276532, 276570, 379002, 379097, 379218, 379589, 379697, 379961, 380051, 380134, 380157, 380490, 380722, 380749, 381042, 381091, 381184, 381239, 381835, 382118, 387181, 387188, 387249, 388026, 388741, 388838, 390371, 639205, 725314, 725351, 725399, 725479, 725635, 725714, 725868, 725980, 725982, 726019, 726166, 726202, 726262, 740827, 741347, 741499, 741551, 741572, 741632, 741788, 741792, 742272, 742601, 742686, 742871, 742873, 743452, 743630, 743745, 743884, 744195, 744351, 744476, 747702, 748642, 748742, 749100, 749473, 901946, 901991, 902011, 902019, 902039, 902051, 902057, 902061, 902071, 902092, 902100, 902118, 902125, 902128, 902130, 902138, 902139, 902143, 902156, 1194988, 1195060, 1195116, 1195133, 1195255, 1195279, 1195452, 1195479, 1195509, 4712066, 4712701, 4713208, 4713927, 4714853, 4715710, 4716962, 4717459, 4717465, 4718082, 4718281, 4718709, 4719823]],
                // Example 2b:  Including only active students (count: 112)
                [12175, 62, 48, true, [140686, 233137, 261890, 261907, 276470, 379697, 390371, 743884, 902092, 902125, 902128, 902139, 1195133, 1195452, 1195509, 4712701, 4718082, 189730, 233157, 256797, 256798, 276115, 276197, 276213, 276219, 276220, 276261, 276347, 276358, 276410, 276436, 276445, 276512, 276520, 276532, 276570, 379002, 379097, 379218, 379589, 379961, 380051, 380134, 380157, 380490, 380722, 380749, 381042, 381091, 381184, 381239, 381835, 382118, 387181, 387188, 387249, 388026, 388741, 388838, 639205, 725314, 725351, 725399, 725479, 725635, 725714, 725868, 725980, 725982, 726019, 726166, 726202, 726262, 740827, 741347, 741499, 741551, 741572, 741632, 741788, 741792, 742272, 742601, 742686, 742871, 742873, 743452, 743630, 743745, 744195, 744351, 744476, 747702, 748642, 748742, 749100, 749473, 901946, 901991, 902011, 902019, 902039, 902051, 902057, 902061, 902071, 902100, 902118, 902130, 902138, 902143, 902156, 1194988, 1195060, 1195116, 1195255, 1195279, 1195479, 4712066, 4713208, 4713927, 4714853, 4715710, 4716962, 4717459, 4717465, 4718281, 4718709, 4719823]],
                // Example 3 : Invalid  academic year id then it should not return any students
                [12175, 62, 0, true, []]
            ]
        ]);
    }


    public function testGetStudentsWithHighIntentToLeave()
    {
        $this->specify("Verify the functionality of the method getStudentsWithHighIntentToLeave", function ($facultyId, $organizationId, $orgAcademicYearId, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getStudentsWithHighIntentToLeave($facultyId, $organizationId, $orgAcademicYearId, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1:  count: 25
                [256048, 189, 33, [4672391, 4672396, 4672403, 4672411, 4672429, 4672447, 4672473, 4672490, 4672501, 4672505, 4672528, 4672537, 4672544, 4672549, 4672580, 4672594, 4672640, 4672667, 4672669, 4672685, 4672694, 4672739, 4672762, 4672767, 4878435], false],
                // Example 2:  count: 25 -- only the active students from the previous example
                [256048, 189, 33, [4672391, 4672396, 4672403, 4672411, 4672429, 4672447, 4672473, 4672490, 4672501, 4672505, 4672528, 4672537, 4672544, 4672549, 4672580, 4672594, 4672640, 4672667, 4672669, 4672685, 4672694, 4672739, 4672762, 4672767, 4878435], true],
                // Example 3:  count: 26
                // This faculty member only has permission set 1246, which gives permission to see intent to leave but not risk.
                // The query I'm replacing had the wrong permission, so would have omitted these students.
                [143073, 91, 38, [1054023, 1115455, 1115753, 1116150, 1116373, 1116384, 1116461, 1116532, 1202025, 4559761, 4560130, 4560134, 4560203, 4560237, 4560688, 4560792, 4561485, 4561707, 4561836, 4561850, 4561941, 4561987, 4562050, 4562065, 4636266, 4636379], false],
                // Example 3:  count: 26 -- only the active students from the previous example
                [143073, 91, 38, [1054023, 1115455, 1115753, 1116150, 1116373, 1116384, 1116461, 1116532, 1202025, 4559761, 4560130, 4560134, 4560203, 4560237, 4560688, 4560792, 4561485, 4561707, 4561836, 4561850, 4561941, 4561987, 4562050, 4562065, 4636266, 4636379], true],

                // Example 4:
                // This faculty member only has permission set 537, which gives permission to see risk but not intent to leave.
                // The query I'm replacing had the wrong permission, and would have returned 26 students.
                [1029244, 38, 91, [], false]
            ]
        ]);
    }


    public function testGetHighPriorityStudents()
    {
        $this->specify("Verify the functionality of the method getHighPriorityStudents", function ($facultyId, $orgAcademicYearId, $onlyIncludeActiveStudents, $expectedResult) {

            $result = $this->predefinedSearchDAO->getHighPriorityStudents($facultyId, $orgAcademicYearId, $onlyIncludeActiveStudents);


            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1:  count: 12
                [256048,  33, false, [4672415, 4672424, 4672487, 4672528, 4672613, 4672653, 4672669, 4878417, 4878423, 4878435, 4878436, 4878443]],
                // Example 2:  count: 28
                [12175,  48, false, [256294, 1035480, 1036500, 1036640, 1037551, 1040071, 1040690, 1040737, 4673385, 4673401, 4674551, 4675056, 4675122, 4675438, 4675639, 4675650, 4676116, 4677075, 4677743, 4678069, 4678156, 4678344, 4678870, 4679433, 4679450, 4711762, 4716807, 4717003]],
                // Example 3:  count: 27 -- only the active students from the previous example
                [12175,  48, true, [4711762, 256294, 1035480, 1036500, 1036640, 1037551, 1040071, 1040690, 1040737, 4673385, 4673401, 4674551, 4675056, 4675122, 4675438, 4675639, 4675650, 4676116, 4677075, 4677743, 4678069, 4678156, 4678344, 4678870, 4679433, 4679450, 4716807, 4717003]]
            ]
        ]);
    }


    public function testGetStudentsAtRiskOfFailure()
    {
        $this->specify("Verify the functionality of the method getStudentsAtRiskOfFailure", function ($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getStudentsAtRiskOfFailure($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1a:  count: 31
                // Doesn't include student 4621724 -- This student was soft-deleted from all her courses.
                // Doesn't include student 4621957 -- The only AU for this student has status "saved", not "closed" (was not submitted).
                [132711, 19, [189, 190], 59, [644262, 972809, 972883, 972897, 972904, 972979, 973183, 973190, 973275, 973361, 1215624, 4621337, 4621499, 4621525, 4621674, 4621708, 4621755, 4621756, 4621773, 4621786, 4621793, 4621795, 4621856, 4621857, 4621898, 4621922, 4621950, 4621969, 4621986], false],
                // -- only the active students from the previous example
                [132711, 19, [189, 190], 59, [644262, 972809, 972883, 972897, 972904, 972979, 973183, 973190, 973275, 973361, 1215624, 4621337, 4621499, 4621525, 4621674, 4621708, 4621755, 4621756, 4621773, 4621786, 4621793, 4621795, 4621856, 4621857, 4621898, 4621922, 4621950, 4621969, 4621986], true],

                // Example 1b:  count: 29
                // Doesn't include 2 students who only had high failure risk in term 190.
                // The query I'm replacing included these students because it was missing the join between org_courses and academic_update.
                [132711, 19, [189], 59, [644262, 972809, 972883, 972897, 972904, 972979, 973183, 973190, 973275, 973361, 1215624, 4621337, 4621525, 4621674, 4621708, 4621755, 4621756, 4621793, 4621795, 4621856, 4621857, 4621898, 4621922, 4621950, 4621969, 4621986], false],
                // -- only the active students from the previous example
                [132711, 19, [189], 59, [644262, 972809, 972883, 972897, 972904, 972979, 973183, 973190, 973275, 973361, 1215624, 4621337, 4621525, 4621674, 4621708, 4621755, 4621756, 4621793, 4621795, 4621856, 4621857, 4621898, 4621922, 4621950, 4621969, 4621986], true],

                // Example 2:  This faculty member only has permission set 1239, which has no course-related or academic-update-related permissions.
                // Without the permission check, this would return 9 students.
                [231441, 19, [189], 59, [], false],
                // Example 3:  This faculty member only has permission set 106, which gives permission to view courses but not academic updates.
                // Without the permission check, this would return 1 student.
                [185246, 19, [189], 59, [], false],
                // Example 4:  This faculty member only has permission set 1177, which gives permission to create and view academic updates for their own courses,
                // but not to view courses or other academic updates.  This is an AU for course 5490, for which this person is faculty.
                // Without the permission check, this would return 68 students.
                [4842819, 179, [141], 66, [912763], false],
                // -- only the active students from the previous example
                [4842819, 179, [141], 66, [912763], true],
                // Example 5:  This faculty member only has permission set 519, which gives permission to view courses and to create and view academic updates for their own courses,
                // but not to view academic updates for other courses.  These AUs are for course 202510, for which this person is faculty.
                // Without the permission check, this would return 19 students.
                [224518, 88, [390], 96, [949070, 949891], false],
                // -- only the active students from the previous example
                [224518, 88, [390], 96, [949070, 949891], true],
                // Example 6:  This faculty member has permission sets 113 and 1202, both of which give permission to view courses and to view academic updates,
                // but not to create academic updates.  This case is not particularly interesting, but is included for completeness.
                [231532, 20, [72], 34, [1031248, 1031273, 1031688, 1031872, 1031938, 1032069, 1032244, 4671796, 4671817, 4671828, 4672154, 4672223, 4673340], false],
                // Example 7: Faculty has been deleted from a course in which they've submitted academic updates. Student should still show up in the search results.
                [201911, 106, [98], 47, [774622, 774624, 774765, 775031, 775103, 775286, 971922, 971923, 971934, 972053, 972114, 972145, 972188, 972240, 972247, 972249, 4557098, 4557114, 4557137, 4557143, 4557152, 4557167, 4557173, 4557179, 4557193, 4557252, 4557260, 4557274, 4557295, 4557338, 4557354, 4557367, 4557385, 4622298, 4667682], false],
                // Example 8: Faculty has been deleted from an organization, but they've submitted academic updates on a student in a course. Student should still
                // show up in the search results.
                [201911, 106, [98], 47, [774622, 774624, 774765, 775031, 775103, 775286, 971922, 971923, 971934, 972053, 972114, 972145, 972188, 972240, 972247, 972249, 4557098, 4557114, 4557137, 4557143, 4557152, 4557167, 4557173, 4557179, 4557193, 4557252, 4557260, 4557274, 4557295, 4557338, 4557354, 4557367, 4557385, 4622298, 4667682], false],
            ]
        ]);
    }


    public function testGetStudentsWithExcessiveAbsences()
    {
        $this->specify("Verify the functionality of the method getStudentsWithExcessiveAbsences", function ($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getStudentsWithExcessiveAbsences($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, 4, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1a:  count: 23
                // Doesn't include student 4621451 -- This student was soft-deleted from the course that the AU was for;
                // he was included in the query I'm replacing because it was missing the join between org_courses and academic_update.
                [132711, 19, [189, 190], 59, [644262, 972897, 972904, 972989, 973275, 1215624, 4621284, 4621346, 4621493, 4621708, 4621722, 4621755, 4621756, 4621786, 4621795, 4621829, 4621843, 4621857, 4621957, 4621969, 4621976, 4621986, 4671532], false],
                //-- only the active students from the previous example
                [132711, 19, [189, 190], 59, [644262, 972897, 972904, 972989, 973275, 1215624, 4621284, 4621346, 4621493, 4621708, 4621722, 4621755, 4621756, 4621786, 4621795, 4621829, 4621843, 4621857, 4621957, 4621969, 4621976, 4621986, 4671532], true],

                // Example 1b:  count: 21
                // Doesn't include 2 students who only had more than 3 absences for courses in term 190.
                // The query I'm replacing included these students because it was missing the join between org_courses and academic_update.
                [132711, 19, [189], 59, [644262, 972897, 972904, 972989, 973275, 1215624, 4621346, 4621493, 4621708, 4621722, 4621755, 4621756, 4621795, 4621829, 4621843, 4621857, 4621957, 4621969, 4621976, 4621986, 4671532], false],
                // Example 2:  This faculty member has permission sets 113 and 1202, both of which give permission to view courses and to view academic updates,
                // but not to create academic updates.  This case is not particularly interesting, but is included for completeness.
                [231532, 20, [157], 34, [4671796, 4671817], false],
                // Example 3: Faculty has been deleted from a course in which they've submitted academic updates. Student should still show up in the search results.
                [4605389, 195, [200], 162, [4687794, 4813584], false],
                // Example 4: Faculty has been deleted from the organization, but they've submitted academic updates on a student in a course. Student should still
                // show up in the search results.
                [4605389, 195, [200], 162, [4687794, 4813584], false]
            ]
        ]);
    }


    public function testGetStudentsWithLowInProgressGrades()
    {
        $this->specify("Verify the functionality of the method getStudentsWithLowInProgressGrades", function ($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $gradesIncluded, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getStudentsWithLowInProgressGrades($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $gradesIncluded, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1a:  count: 101
                [256048, 189, [71, 383], 33, $this->inProgressGradesCOrBelow, [4672378, 4672380, 4672382, 4672385, 4672386, 4672389, 4672391, 4672395, 4672397, 4672402, 4672407, 4672413, 4672415, 4672419, 4672424, 4672434, 4672435, 4672438, 4672439, 4672441, 4672446, 4672448, 4672456, 4672460, 4672463, 4672466, 4672467, 4672475, 4672479, 4672487, 4672490, 4672492, 4672496, 4672497, 4672503, 4672505, 4672508, 4672511, 4672516, 4672520, 4672521, 4672526, 4672527, 4672529, 4672533, 4672535, 4672536, 4672546, 4672547, 4672557, 4672570, 4672571, 4672581, 4672592, 4672597, 4672606, 4672608, 4672609, 4672611, 4672613, 4672620, 4672622, 4672623, 4672627, 4672630, 4672632, 4672638, 4672642, 4672647, 4672653, 4672659, 4672661, 4672666, 4672669, 4672674, 4672676, 4672678, 4672681, 4672686, 4672692, 4672695, 4672697, 4672700, 4672702, 4672714, 4672720, 4672723, 4672726, 4672729, 4672731, 4672743, 4672744, 4672748, 4672750, 4672757, 4672764, 4672768, 4799584, 4799585, 4878421, 4878432], false],
                //-- only the active students from the previous example
                [256048, 189, [71, 383], 33, $this->inProgressGradesCOrBelow, [4672378, 4672380, 4672382, 4672385, 4672386, 4672389, 4672391, 4672395, 4672397, 4672402, 4672407, 4672413, 4672415, 4672419, 4672424, 4672434, 4672435, 4672438, 4672439, 4672441, 4672446, 4672448, 4672456, 4672460, 4672463, 4672466, 4672467, 4672475, 4672479, 4672487, 4672490, 4672492, 4672496, 4672497, 4672503, 4672505, 4672508, 4672511, 4672516, 4672520, 4672521, 4672526, 4672527, 4672529, 4672533, 4672535, 4672536, 4672546, 4672547, 4672557, 4672570, 4672571, 4672581, 4672592, 4672597, 4672606, 4672608, 4672609, 4672611, 4672613, 4672620, 4672622, 4672623, 4672627, 4672630, 4672632, 4672638, 4672642, 4672647, 4672653, 4672659, 4672661, 4672666, 4672669, 4672674, 4672676, 4672678, 4672681, 4672686, 4672692, 4672695, 4672697, 4672700, 4672702, 4672714, 4672720, 4672723, 4672726, 4672729, 4672731, 4672743, 4672744, 4672748, 4672750, 4672757, 4672764, 4672768, 4799584, 4799585, 4878421, 4878432], true],

                // Example 1b:  count: 91
                // Doesn't include 10 students who only had grades of C or below in term 383, not in term 71.
                // The query I'm replacing included 7 of these students (the ones who had academic updates in term 71) because it was missing the join between org_courses and academic_update.
                [256048, 189, [71], 33, $this->inProgressGradesCOrBelow, [4672378, 4672380, 4672382, 4672385, 4672386, 4672389, 4672391, 4672395, 4672397, 4672402, 4672407, 4672413, 4672415, 4672419, 4672424, 4672434, 4672435, 4672438, 4672439, 4672441, 4672446, 4672448, 4672456, 4672460, 4672463, 4672466, 4672467, 4672475, 4672479, 4672487, 4672490, 4672492, 4672496, 4672497, 4672503, 4672505, 4672508, 4672511, 4672516, 4672520, 4672521, 4672526, 4672527, 4672535, 4672536, 4672546, 4672547, 4672557, 4672570, 4672571, 4672581, 4672592, 4672597, 4672606, 4672608, 4672609, 4672611, 4672613, 4672620, 4672622, 4672623, 4672630, 4672632, 4672638, 4672642, 4672647, 4672653, 4672659, 4672661, 4672666, 4672669, 4672674, 4672676, 4672686, 4672692, 4672695, 4672697, 4672700, 4672702, 4672714, 4672720, 4672726, 4672731, 4672744, 4672748, 4672750, 4672757, 4672764, 4672768, 4799584, 4799585], false],
                //-- only the active students from the previous example
                [256048, 189, [71], 33, $this->inProgressGradesCOrBelow, [4672378, 4672380, 4672382, 4672385, 4672386, 4672389, 4672391, 4672395, 4672397, 4672402, 4672407, 4672413, 4672415, 4672419, 4672424, 4672434, 4672435, 4672438, 4672439, 4672441, 4672446, 4672448, 4672456, 4672460, 4672463, 4672466, 4672467, 4672475, 4672479, 4672487, 4672490, 4672492, 4672496, 4672497, 4672503, 4672505, 4672508, 4672511, 4672516, 4672520, 4672521, 4672526, 4672527, 4672535, 4672536, 4672546, 4672547, 4672557, 4672570, 4672571, 4672581, 4672592, 4672597, 4672606, 4672608, 4672609, 4672611, 4672613, 4672620, 4672622, 4672623, 4672630, 4672632, 4672638, 4672642, 4672647, 4672653, 4672659, 4672661, 4672666, 4672669, 4672674, 4672676, 4672686, 4672692, 4672695, 4672697, 4672700, 4672702, 4672714, 4672720, 4672726, 4672731, 4672744, 4672748, 4672750, 4672757, 4672764, 4672768, 4799584, 4799585], true],

                // Example 1c:  count: 71
                [256048, 189, [71, 383], 33, $this->inProgressGradesDOrBelow, [4672378, 4672382, 4672385, 4672386, 4672389, 4672391, 4672397, 4672407, 4672413, 4672415, 4672424, 4672435, 4672438, 4672439, 4672448, 4672460, 4672463, 4672467, 4672475, 4672487, 4672490, 4672492, 4672505, 4672508, 4672511, 4672520, 4672521, 4672526, 4672529, 4672533, 4672535, 4672536, 4672546, 4672547, 4672557, 4672571, 4672592, 4672597, 4672606, 4672611, 4672613, 4672622, 4672623, 4672627, 4672638, 4672642, 4672647, 4672653, 4672659, 4672666, 4672669, 4672674, 4672681, 4672686, 4672697, 4672700, 4672702, 4672714, 4672720, 4672723, 4672729, 4672731, 4672743, 4672744, 4672757, 4672764, 4672768, 4799584, 4799585, 4878421, 4878432], false],
                //-- only the active students from the previous example
                [256048, 189, [71, 383], 33, $this->inProgressGradesDOrBelow, [4672378, 4672382, 4672385, 4672386, 4672389, 4672391, 4672397, 4672407, 4672413, 4672415, 4672424, 4672435, 4672438, 4672439, 4672448, 4672460, 4672463, 4672467, 4672475, 4672487, 4672490, 4672492, 4672505, 4672508, 4672511, 4672520, 4672521, 4672526, 4672529, 4672533, 4672535, 4672536, 4672546, 4672547, 4672557, 4672571, 4672592, 4672597, 4672606, 4672611, 4672613, 4672622, 4672623, 4672627, 4672638, 4672642, 4672647, 4672653, 4672659, 4672666, 4672669, 4672674, 4672681, 4672686, 4672697, 4672700, 4672702, 4672714, 4672720, 4672723, 4672729, 4672731, 4672743, 4672744, 4672757, 4672764, 4672768, 4799584, 4799585, 4878421, 4878432], true],

                // Example 1d:  count: 62
                // Doesn't include 9 students who only had grades of D or below in term 383, not in term 71.
                // The query I'm replacing included 6 of these students (the ones who had academic updates in term 71) because it was missing the join between org_courses and academic_update.
                [256048, 189, [71], 33, $this->inProgressGradesDOrBelow, [4672378, 4672382, 4672385, 4672386, 4672389, 4672391, 4672397, 4672407, 4672413, 4672415, 4672424, 4672435, 4672438, 4672439, 4672448, 4672460, 4672463, 4672467, 4672475, 4672487, 4672490, 4672492, 4672505, 4672508, 4672511, 4672520, 4672521, 4672526, 4672535, 4672536, 4672546, 4672547, 4672557, 4672571, 4672592, 4672597, 4672606, 4672611, 4672613, 4672622, 4672623, 4672638, 4672642, 4672647, 4672653, 4672659, 4672666, 4672669, 4672674, 4672686, 4672697, 4672700, 4672702, 4672714, 4672720, 4672731, 4672744, 4672757, 4672764, 4672768, 4799584, 4799585], false],
                //-- only the active students from the previous example
                [256048, 189, [71], 33, $this->inProgressGradesDOrBelow, [4672378, 4672382, 4672385, 4672386, 4672389, 4672391, 4672397, 4672407, 4672413, 4672415, 4672424, 4672435, 4672438, 4672439, 4672448, 4672460, 4672463, 4672467, 4672475, 4672487, 4672490, 4672492, 4672505, 4672508, 4672511, 4672520, 4672521, 4672526, 4672535, 4672536, 4672546, 4672547, 4672557, 4672571, 4672592, 4672597, 4672606, 4672611, 4672613, 4672622, 4672623, 4672638, 4672642, 4672647, 4672653, 4672659, 4672666, 4672669, 4672674, 4672686, 4672697, 4672700, 4672702, 4672714, 4672720, 4672731, 4672744, 4672757, 4672764, 4672768, 4799584, 4799585], true],

                // Example 2:  This faculty member only has permission set 1239, which has no course-related or academic-update-related permissions.
                // Without the permission check, this would return 105 students.
                [231441, 19, [189], 59, $this->inProgressGradesDOrBelow, [], false],
                // Example 3:  This faculty member only has permission set 106, which gives permission to view courses but not academic updates.
                // Without the permission check, this would return 9 students.
                [185246, 19, [189], 59, $this->inProgressGradesDOrBelow, [], false],
                // Example 4:  This faculty member only has permission set 1177, which gives permission to create and view academic updates for their own courses,
                // but not to view courses or other academic updates.  This is an AU for course 5490, for which this person is faculty.
                // Without the permission check, this would return 348 students.
                [4842819, 179, [141], 66, $this->inProgressGradesDOrBelow, [912763], false],
                // Example 5:  This faculty member has permission sets 113 and 1202, both of which give permission to view courses and to view academic updates,
                // but not to create academic updates.  This case is not particularly interesting, but is included for completeness.
                [231532, 20, [72], 34, $this->inProgressGradesDOrBelow, [1031248, 1031688, 1031872, 1031938, 1032069, 4671796, 4671828, 4672154, 4672223, 4673340], false],
                // Example 6: Faculty has been deleted from a course in which they've submitted academic updates. Student should still show up in the search results.
                [201911, 106, [98], 47, $this->inProgressGradesDOrBelow, [774622, 774765, 774807, 775286, 971922, 971923, 971934, 972053, 972114, 972124, 972145, 972188, 972240, 972247, 972249, 4557098, 4557114, 4557137, 4557152, 4557167, 4557173, 4557179, 4557193, 4557252, 4557260, 4557274, 4557295, 4557319, 4557338, 4557344, 4557354, 4557385, 4622298], false],
                // Example 7: Faculty has been deleted from the organization, but they've submitted academic updates on a student in a course. Student should still
                // show up in the search results.
                [201911, 106, [98], 47, $this->inProgressGradesDOrBelow, [774622, 774765, 774807, 775286, 971922, 971923, 971934, 972053, 972114, 972124, 972145, 972188, 972240, 972247, 972249, 4557098, 4557114, 4557137, 4557152, 4557167, 4557173, 4557179, 4557193, 4557252, 4557260, 4557274, 4557295, 4557319, 4557338, 4557344, 4557354, 4557385, 4622298], false]
            ]
        ]);
    }


    public function testGetStudentsWithMultipleLowInProgressGrades()
    {
        $this->specify("Verify the functionality of the method getStudentsWithMultipleLowInProgressGrades", function ($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $gradesIncluded, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getStudentsWithMultipleLowInProgressGrades($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $gradesIncluded, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1a:  count: 32
                // In addition to the students in the next two examples, who have two or more D-or-below grades in the same term,
                // there are 9 in this list who have one D-or-below grade in one term and one D-or-below grade in the other.
                // These two terms are not actually concurrent, but in practice multiple terms passed into this function would be,
                // and I believe it is the desired behavior to count these students.
                [256048, 189, [71, 383], 33, $this->inProgressGradesDOrBelow, [4672378, 4672386, 4672391, 4672413, 4672424, 4672435, 4672438, 4672463, 4672467, 4672490, 4672492, 4672511, 4672520, 4672521, 4672536, 4672571, 4672592, 4672597, 4672606, 4672613, 4672622, 4672647, 4672653, 4672666, 4672686, 4672700, 4672702, 4672729, 4672744, 4672768, 4799584], false],
                //-- only the active students from the previous example
                [256048, 189, [71, 383], 33, $this->inProgressGradesDOrBelow, [4672378, 4672386, 4672391, 4672413, 4672424, 4672435, 4672438, 4672463, 4672467, 4672490, 4672492, 4672511, 4672520, 4672521, 4672536, 4672571, 4672592, 4672597, 4672606, 4672613, 4672622, 4672647, 4672653, 4672666, 4672686, 4672700, 4672702, 4672729, 4672744, 4672768, 4799584], true],

                // Example 1b:  count: 22
                [256048, 189, [71], 33, $this->inProgressGradesDOrBelow, [4672378, 4672386, 4672391, 4672424, 4672435, 4672438, 4672463, 4672467, 4672490, 4672511, 4672521, 4672592, 4672606, 4672613, 4672647, 4672653, 4672666, 4672686, 4672702, 4672744, 4799584], false],
                //-- only the active students from the previous example
                [256048, 189, [71], 33, $this->inProgressGradesDOrBelow, [4672378, 4672386, 4672391, 4672424, 4672435, 4672438, 4672463, 4672467, 4672490, 4672511, 4672521, 4672592, 4672606, 4672613, 4672647, 4672653, 4672666, 4672686, 4672702, 4672744, 4799584], true],

                // Example 1c: count: 1
                [256048, 189, [383], 33, $this->inProgressGradesDOrBelow, [4672729], false],
                //-- only the active students from the previous example
                [256048, 189, [383], 33, $this->inProgressGradesDOrBelow, [4672729], true],
                // Example 2:  This faculty member only has permission set 1239, which has no course-related or academic-update-related permissions.
                // Without the permission check, this would return 27 students.
                [231441, 19, [189], 59, $this->inProgressGradesDOrBelow, [], false],
                // Example 3:  This faculty member only has permission set 106, which gives permission to view courses but not academic updates.
                // Without the permission check, this would return 1 student.
                [185246, 19, [189], 59, $this->inProgressGradesDOrBelow, [], false],
                // Example 4:  To be added.
                //[],
                // Example 5:  To be added.
                //[],
                // Example 6:  This faculty member has permission sets 113 and 1202, both of which give permission to view courses and to view academic updates,
                // but not to create academic updates.  This case is not particularly interesting, but is included for completeness.
                [231532, 20, [72], 34, $this->inProgressGradesDOrBelow, [4671796, 4671828], false],
                // Example 6: Faculty has been deleted from a course in which they've submitted academic updates. Student should still show up in the search results.
                [201911, 106, [98], 47, $this->inProgressGradesDOrBelow, [972114, 4557179, 4557193, 4557252, 4557274, 4557338, 4557385], false],
                // Example 7: Faculty has been deleted from the organization, but they've submitted academic updates on a student in a course. Student should still
                // show up in the search results.
                [201911, 106, [98], 47, $this->inProgressGradesDOrBelow, [972114, 4557179, 4557193, 4557252, 4557274, 4557338, 4557385], false]
            ]
        ]);
    }


    public function testGetStudentsWithLowFinalGrades()
    {
        $this->specify("Verify the functionality of the method getStudentsWithLowFinalGrades", function ($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $gradesIncluded, $sliceFlag, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getStudentsWithLowFinalGrades($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $gradesIncluded, $onlyIncludeActiveStudents);

            $result = ($sliceFlag) ? array_slice($result, 0, 10) : $result;
            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));


        }, ["examples" =>
            [
                // Example 1a:  count: 16
                [108040, 46, [261, 262], 40, $this->finalGradesCOrBelow, false, [4775354, 4775483, 4775599, 4775610, 4775641, 4775878, 4776030, 4776066, 4776267, 4776313, 4776380, 4776777, 4776996, 4777077, 4777160, 4777274], false],
                // Example 1b:  count: 12
                // Doesn't include 4 students who only had final grades of C or below in term 262, not in term 261.
                // The query I'm replacing included these students because it was missing the join between org_courses and academic_update.
                [108040, 46, [261], 40, $this->finalGradesCOrBelow, false, [4775354, 4775483, 4775599, 4775610, 4775641, 4775878, 4776030, 4776066, 4776313, 4776777, 4776996, 4777077], false],
                // Example 1c:  count: 10
                [108040, 46, [261, 262], 40, $this->finalGradesDOrBelow, false, [4775354, 4775483, 4775599, 4775610, 4775641, 4776030, 4776313, 4776777, 4776996, 4777077], false],
                // Example 1d:  count: 7
                // Doesn't include 3 students who only had grades of D or below in term 262, not in term 261.
                // The query I'm replacing included these students because it was missing the join between org_courses and academic_update.
                [108040, 46, [261], 40, $this->finalGradesDOrBelow, false, [4775354, 4775483, 4775641, 4776313, 4776777, 4776996, 4777077], false],
                // Example 2:  This faculty member only has permission set 514, which has no course-related or academic-update-related permissions.
                // Without the permission check, this would return 1890 students.
                [159109, 87, [154], 69, $this->finalGradesDOrBelow, false, [], false],
                // Example 3:  This faculty member only has permission set 1322, which gives permission to view courses but not final grades.
                // Without the permission check, this would return 21 students.
                [151725, 18, [49], 69, $this->finalGradesDOrBelow, false, [], false],
                // Example 4:  This faculty member only has permission set 1177, which gives permission to create and view academic updates for their own courses,
                // but not to view courses, other academic updates, or final grades.  These students both have C-or-below final grades for course 5490, for which this person is faculty.
                // Without the permission check, this would return 912 students.
                [4842819, 179, [141], 66, $this->finalGradesCOrBelow, false, [974140, 1208724], false],
                // Example 5:  This faculty member has permission sets 113 and 1202, both of which give permission to view courses and to view academic updates,
                // but not to create academic updates.  One of them gives permission to view final grades.
                // This case is not particularly interesting, but is included for completeness.
                [231532, 20, [72], 34, $this->finalGradesDOrBelow, false, [1031273, 1031248, 1031699, 1031872, 1031938, 1032010, 1032069, 1032429, 4671796, 4671817, 4671828, 4672223], false],
                // Example 6: Faculty has been deleted from a course in which they've submitted academic updates. Student should still show up in the search results.
                [180607, 119, [177], 81, $this->finalGradesDOrBelow, true, [4543454, 4543484, 4543568, 4543630, 4543635, 4543721, 4543724, 4543797, 4543816, 4543945], false],
                // Example 7: Faculty has been deleted from the organization, but they've submitted academic updates on a student in a course. Student should still
                // show up in the search results.
                [180607, 119, [177], 81, $this->finalGradesDOrBelow, true, [4543454, 4543484, 4543568, 4543630, 4543635, 4543721, 4543724, 4543797, 4543816, 4543945], false]
            ]
        ]);
    }


    public function testGetStudentsWithMultipleLowFinalGrades()
    {
        $this->specify("Verify the functionality of the method getStudentsWithMultipleLowFinalGrades", function ($facultyId, $organizationId, $orgAcademicTermIds, $gradesIncluded, $orgAcademicYearId, $sliceFlag, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getStudentsWithMultipleLowFinalGrades($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $gradesIncluded, $onlyIncludeActiveStudents);

            $result = ($sliceFlag) ? array_slice($result, 0, 10) : $result;
            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1a:  count: 5
                // Note that the separate counts for the two terms don't add up to this 5 because one student had multiple D/F grades in both terms.
                [108040, 46, [261, 262], $this->finalGradesDOrBelow, 40, false, [4775354, 4775641, 4776313, 4776777, 4777077], false],
                // Example 1b:  count: 3
                [108040, 46, [261], $this->finalGradesDOrBelow, 40, false, [4775354, 4775641, 4777077],false],
                // Example 1c:  count: 3
                [108040, 46, [262], $this->finalGradesDOrBelow, 40, false, [4775641, 4776313, 4776777], false],
                // Example 2:  This faculty member only has permission set 514, which has no course-related or academic-update-related permissions.
                // Without the permission check, this would return 902 students.
                [159109, 87, [154], $this->finalGradesDOrBelow, 69, false, [], false],
                // Example 3:  This faculty member only has permission set 1322, which gives permission to view courses but not final grades.
                // Without the permission check, this would return 7 students.
                [151725, 18, [49], $this->finalGradesDOrBelow, 6, false, [], false],
                // Example 4a:  This faculty member has permission sets 113 and 1202, both of which give permission to view courses and to view academic updates,
                // but not to create academic updates.  One of them gives permission to view final grades.
                // Student 1031938 shows up in this list but not in the below examples which are only looking at one term -- this student has one D/F grade in one term and one in the other.
                [231532, 20, [72, 157], $this->finalGradesDOrBelow, 34, false, [1031248, 1031273, 1031872, 1031938, 1032429, 4671796, 4671828, 4672223],false],
                // Example 4b
                [231532, 20, [72], $this->finalGradesDOrBelow, 34, false, [1031248, 1031872, 4671796, 4671828, 4672223],false],
                // Example 4c
                [231532, 20, [157], $this->finalGradesDOrBelow, 34, false, [4671828],false],
                // Example 5: Faculty has been deleted from a course in which they've submitted academic updates. Student should still show up in the search results.
                [180607, 119, [177], $this->finalGradesDOrBelow, 81, true, [672600, 672685, 672746, 672786, 672822, 672887, 673052, 696534, 696602, 705612],false],
                // Example 6: Faculty has been deleted from the organization, but they've submitted academic updates on a student in a course. Student should still
                // show up in the search results.
                [180607, 119, [177], $this->finalGradesDOrBelow, 81, true, [672600, 672685, 672746, 672786, 672822, 672887, 673052, 696534, 696602, 705612],false],
            ]
        ]);
    }


    public function testGetStudentsHavingInteractionContacts()
    {
        $this->specify("Verify the functionality of the method getStudentsHavingInteractionContacts", function ($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getStudentsHavingInteractionContacts($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1a:  count: 6
                // Note that this doesn't include 7 additional students who only had non-interaction contacts, such as 4878607.
                [220115, 62, [108, 109], 48, [4674136, 4676512, 4676996, 4678174, 4678314, 4714118], false],
                // -- only the active students from the previous example
                [220115, 62, [108, 109], 48, [4674136, 4676512, 4676996, 4678174, 4678314, 4714118], true],
                // Example 1b:  Only 4 of the above 6 contacts were in term 108.
                [220115, 62, [108], 48, [4674136, 4676996, 4678174, 4678314], false],
                // -- only the active students from the previous example
                [220115, 62, [108], 48, [4674136, 4676996, 4678174, 4678314], true],
                // Example 2:  count: 43
                // This example is included so that it can be used in conjunction with the next test (since the person in example 1 is connected to too many students to include in the test)
                [256048, 189, [71], 33, [4672300, 4672378, 4672385, 4672386, 4672389, 4672402, 4672419, 4672421, 4672423, 4672424, 4672438, 4672439, 4672440, 4672445, 4672446, 4672448, 4672463, 4672466, 4672467, 4672490, 4672505, 4672508, 4672511, 4672538, 4672547, 4672554, 4672581, 4672592, 4672597, 4672637, 4672662, 4672666, 4672669, 4672670, 4672671, 4672674, 4672686, 4672700, 4672732, 4672739, 4672754, 4672759, 4799584], false],
                // -- only the active students from the previous example
                [256048, 189, [71], 33, [4672300, 4672378, 4672385, 4672386, 4672389, 4672402, 4672419, 4672421, 4672423, 4672424, 4672438, 4672439, 4672440, 4672445, 4672446, 4672448, 4672463, 4672466, 4672467, 4672490, 4672505, 4672508, 4672511, 4672538, 4672547, 4672554, 4672581, 4672592, 4672597, 4672637, 4672662, 4672666, 4672669, 4672670, 4672671, 4672674, 4672686, 4672700, 4672732, 4672739, 4672754, 4672759, 4799584], true],

            ]
        ]);
    }

    public function testGetStudentsNotHavingInteractionContacts()
    {
        $this->specify("Verify the functionality of the method getStudentsNotHavingInteractionContacts", function ($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getStudentsNotHavingInteractionContacts($facultyId, $organizationId, $orgAcademicTermIds, $orgAcademicYearId, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1:  count: 381
                // This list is the complement of the the list in the previous test; that is, it includes all students in the testGetAllMyStudents example who are not in the testGetStudentsHavingInteractionActivity example.
                [256048, 189, [71], 33, [4672299, 4672373, 4672374, 4672375, 4672376, 4672377, 4672379, 4672380, 4672381, 4672382, 4672383, 4672384, 4672387, 4672388, 4672390, 4672391, 4672392, 4672393, 4672394, 4672395, 4672396, 4672397, 4672398, 4672399, 4672400, 4672401, 4672403, 4672404, 4672406, 4672407, 4672408, 4672409, 4672410, 4672411, 4672412, 4672413, 4672414, 4672415, 4672416, 4672417, 4672418, 4672420, 4672422, 4672425, 4672426, 4672427, 4672428, 4672429, 4672430, 4672431, 4672432, 4672433, 4672434, 4672435, 4672436, 4672437, 4672441, 4672442, 4672443, 4672444, 4672447, 4672449, 4672450, 4672451, 4672452, 4672453, 4672454, 4672455, 4672456, 4672457, 4672458, 4672459, 4672460, 4672462, 4672464, 4672465, 4672468, 4672469, 4672470, 4672471, 4672472, 4672473, 4672474, 4672475, 4672476, 4672477, 4672478, 4672479, 4672480, 4672481, 4672482, 4672483, 4672484, 4672485, 4672486, 4672487, 4672488, 4672489, 4672492, 4672493, 4672494, 4672495, 4672496, 4672497, 4672498, 4672499, 4672500, 4672501, 4672502, 4672503, 4672504, 4672506, 4672507, 4672509, 4672510, 4672512, 4672513, 4672514, 4672515, 4672516, 4672517, 4672519, 4672520, 4672521, 4672522, 4672523, 4672524, 4672525, 4672526, 4672527, 4672528, 4672529, 4672530, 4672531, 4672532, 4672533, 4672534, 4672535, 4672536, 4672537, 4672539, 4672540, 4672541, 4672542, 4672543, 4672544, 4672545, 4672546, 4672548, 4672549, 4672550, 4672551, 4672552, 4672553, 4672555, 4672556, 4672557, 4672558, 4672559, 4672560, 4672561, 4672562, 4672563, 4672564, 4672565, 4672566, 4672567, 4672568, 4672569, 4672570, 4672571, 4672572, 4672573, 4672574, 4672575, 4672576, 4672577, 4672578, 4672579, 4672580, 4672582, 4672583, 4672584, 4672585, 4672586, 4672587, 4672588, 4672590, 4672591, 4672593, 4672594, 4672595, 4672598, 4672599, 4672600, 4672601, 4672602, 4672603, 4672604, 4672605, 4672606, 4672607, 4672608, 4672609, 4672610, 4672611, 4672612, 4672613, 4672614, 4672615, 4672616, 4672617, 4672618, 4672619, 4672620, 4672621, 4672622, 4672623, 4672624, 4672625, 4672626, 4672627, 4672628, 4672629, 4672630, 4672631, 4672632, 4672633, 4672634, 4672635, 4672636, 4672638, 4672639, 4672640, 4672641, 4672642, 4672643, 4672644, 4672645, 4672646, 4672647, 4672650, 4672652, 4672653, 4672654, 4672655, 4672656, 4672657, 4672658, 4672659, 4672660, 4672661, 4672663, 4672664, 4672665, 4672667, 4672668, 4672672, 4672673, 4672675, 4672676, 4672677, 4672678, 4672679, 4672680, 4672681, 4672682, 4672683, 4672684, 4672685, 4672687, 4672688, 4672689, 4672690, 4672691, 4672692, 4672693, 4672694, 4672695, 4672697, 4672698, 4672699, 4672701, 4672702, 4672703, 4672704, 4672705, 4672706, 4672707, 4672708, 4672709, 4672710, 4672711, 4672712, 4672713, 4672714, 4672715, 4672716, 4672717, 4672718, 4672719, 4672720, 4672721, 4672722, 4672723, 4672724, 4672725, 4672726, 4672727, 4672728, 4672729, 4672730, 4672731, 4672733, 4672734, 4672735, 4672736, 4672737, 4672738, 4672740, 4672741, 4672742, 4672743, 4672744, 4672745, 4672746, 4672747, 4672748, 4672749, 4672750, 4672751, 4672752, 4672753, 4672755, 4672756, 4672757, 4672758, 4672760, 4672761, 4672762, 4672764, 4672765, 4672766, 4672767, 4672768, 4799582, 4799583, 4799585, 4878410, 4878411, 4878412, 4878413, 4878414, 4878415, 4878416, 4878417, 4878418, 4878419, 4878420, 4878421, 4878422, 4878423, 4878424, 4878425, 4878426, 4878427, 4878428, 4878429, 4878430, 4878431, 4878432, 4878433, 4878434, 4878435, 4878436, 4878437, 4878439, 4878440, 4878441, 4878442, 4878443], false],

                // -- only the active students from the previous example
                [256048, 189, [71], 33, [4672299, 4672373, 4672374, 4672375, 4672376, 4672377, 4672379, 4672380, 4672381, 4672382, 4672383, 4672384, 4672387, 4672388, 4672390, 4672391, 4672392, 4672393, 4672394, 4672395, 4672396, 4672397, 4672398, 4672399, 4672400, 4672401, 4672403, 4672404, 4672406, 4672407, 4672408, 4672409, 4672410, 4672411, 4672412, 4672413, 4672414, 4672415, 4672416, 4672417, 4672418, 4672420, 4672422, 4672425, 4672426, 4672427, 4672428, 4672429, 4672430, 4672431, 4672432, 4672433, 4672434, 4672435, 4672436, 4672437, 4672441, 4672442, 4672443, 4672444, 4672447, 4672449, 4672450, 4672451, 4672452, 4672453, 4672454, 4672455, 4672456, 4672457, 4672458, 4672459, 4672460, 4672462, 4672464, 4672465, 4672468, 4672469, 4672470, 4672471, 4672472, 4672473, 4672474, 4672475, 4672476, 4672477, 4672478, 4672479, 4672480, 4672481, 4672482, 4672483, 4672484, 4672485, 4672486, 4672487, 4672488, 4672489, 4672492, 4672493, 4672494, 4672495, 4672496, 4672497, 4672498, 4672499, 4672500, 4672501, 4672502, 4672503, 4672504, 4672506, 4672507, 4672509, 4672510, 4672512, 4672513, 4672514, 4672515, 4672516, 4672517, 4672519, 4672520, 4672521, 4672522, 4672523, 4672524, 4672525, 4672526, 4672527, 4672528, 4672529, 4672530, 4672531, 4672532, 4672533, 4672534, 4672535, 4672536, 4672537, 4672539, 4672540, 4672541, 4672542, 4672543, 4672544, 4672545, 4672546, 4672548, 4672549, 4672550, 4672551, 4672552, 4672553, 4672555, 4672556, 4672557, 4672558, 4672559, 4672560, 4672561, 4672562, 4672563, 4672564, 4672565, 4672566, 4672567, 4672568, 4672569, 4672570, 4672571, 4672572, 4672573, 4672574, 4672575, 4672576, 4672577, 4672578, 4672579, 4672580, 4672582, 4672583, 4672584, 4672585, 4672586, 4672587, 4672588, 4672590, 4672591, 4672593, 4672594, 4672595, 4672598, 4672599, 4672600, 4672601, 4672602, 4672603, 4672604, 4672605, 4672606, 4672607, 4672608, 4672609, 4672610, 4672611, 4672612, 4672613, 4672614, 4672615, 4672616, 4672617, 4672618, 4672619, 4672620, 4672621, 4672622, 4672623, 4672624, 4672625, 4672626, 4672627, 4672628, 4672629, 4672630, 4672631, 4672632, 4672633, 4672634, 4672635, 4672636, 4672638, 4672639, 4672640, 4672641, 4672642, 4672643, 4672644, 4672645, 4672646, 4672647, 4672650, 4672652, 4672653, 4672654, 4672655, 4672656, 4672657, 4672658, 4672659, 4672660, 4672661, 4672663, 4672664, 4672665, 4672667, 4672668, 4672672, 4672673, 4672675, 4672676, 4672677, 4672678, 4672679, 4672680, 4672681, 4672682, 4672683, 4672684, 4672685, 4672687, 4672688, 4672689, 4672690, 4672691, 4672692, 4672693, 4672694, 4672695, 4672697, 4672698, 4672699, 4672701, 4672702, 4672703, 4672704, 4672705, 4672706, 4672707, 4672708, 4672709, 4672710, 4672711, 4672712, 4672713, 4672714, 4672715, 4672716, 4672717, 4672718, 4672719, 4672720, 4672721, 4672722, 4672723, 4672724, 4672725, 4672726, 4672727, 4672728, 4672729, 4672730, 4672731, 4672733, 4672734, 4672735, 4672736, 4672737, 4672738, 4672740, 4672741, 4672742, 4672743, 4672744, 4672745, 4672746, 4672747, 4672748, 4672749, 4672750, 4672751, 4672752, 4672753, 4672755, 4672756, 4672757, 4672758, 4672760, 4672761, 4672762, 4672764, 4672765, 4672766, 4672767, 4672768, 4799582, 4799583, 4799585, 4878410, 4878411, 4878412, 4878413, 4878414, 4878415, 4878416, 4878417, 4878418, 4878419, 4878420, 4878421, 4878422, 4878423, 4878424, 4878425, 4878426, 4878427, 4878428, 4878429, 4878430, 4878431, 4878432, 4878433, 4878434, 4878435, 4878436, 4878437, 4878439, 4878440, 4878441, 4878442, 4878443], true]

            ]
        ]);
    }


    public function testGetUnreviewedStudents()
    {
        $this->specify("Verify the functionality of the method getUnreviewedStudents", function ($facultyId, $organizationId, $orgAcademicYearId, $expectedResult, $onlyIncludeActiveStudents) {

            $result = $this->predefinedSearchDAO->getUnreviewedStudents($facultyId, $organizationId, $orgAcademicYearId, $onlyIncludeActiveStudents);

            verify(array_diff($result, $expectedResult))->equals([]);
            verify(array_diff($expectedResult, $result))->equals([]);
            verify(count($result))->equals(count($expectedResult));

        }, ["examples" =>
            [
                // Example 1:  count: 359
                // This includes 315 students whose profile pages have never been viewed by the user
                // and 44 students whose risk score has changed since their profile page was viewed by the user.
                [256048, 189, 33, [4672299, 4672300, 4672373, 4672374, 4672375, 4672376, 4672378, 4672379, 4672380, 4672381, 4672382, 4672383, 4672384, 4672387, 4672388, 4672389, 4672391, 4672392, 4672393, 4672394, 4672395, 4672397, 4672398, 4672400, 4672401, 4672402, 4672403, 4672404, 4672407, 4672408, 4672409, 4672410, 4672412, 4672413, 4672414, 4672415, 4672416, 4672417, 4672418, 4672419, 4672422, 4672424, 4672425, 4672426, 4672427, 4672428, 4672430, 4672431, 4672432, 4672433, 4672436, 4672437, 4672438, 4672441, 4672442, 4672443, 4672444, 4672445, 4672447, 4672448, 4672450, 4672451, 4672452, 4672453, 4672454, 4672455, 4672456, 4672457, 4672458, 4672459, 4672460, 4672462, 4672463, 4672464, 4672465, 4672466, 4672467, 4672469, 4672470, 4672471, 4672472, 4672474, 4672476, 4672477, 4672478, 4672479, 4672481, 4672482, 4672483, 4672484, 4672486, 4672487, 4672488, 4672489, 4672492, 4672493, 4672494, 4672495, 4672497, 4672498, 4672500, 4672501, 4672502, 4672503, 4672504, 4672505, 4672506, 4672507, 4672509, 4672510, 4672511, 4672512, 4672513, 4672514, 4672515, 4672516, 4672517, 4672519, 4672520, 4672521, 4672522, 4672523, 4672524, 4672525, 4672526, 4672527, 4672528, 4672529, 4672531, 4672532, 4672533, 4672534, 4672536, 4672537, 4672540, 4672541, 4672542, 4672543, 4672544, 4672545, 4672546, 4672547, 4672548, 4672549, 4672550, 4672551, 4672552, 4672553, 4672555, 4672556, 4672557, 4672558, 4672559, 4672560, 4672561, 4672564, 4672565, 4672566, 4672567, 4672568, 4672569, 4672570, 4672571, 4672572, 4672573, 4672576, 4672577, 4672578, 4672579, 4672580, 4672581, 4672582, 4672583, 4672584, 4672585, 4672586, 4672587, 4672588, 4672590, 4672591, 4672593, 4672595, 4672597, 4672598, 4672599, 4672600, 4672601, 4672602, 4672603, 4672604, 4672607, 4672608, 4672609, 4672610, 4672612, 4672613, 4672614, 4672615, 4672616, 4672617, 4672618, 4672619, 4672620, 4672621, 4672622, 4672623, 4672624, 4672625, 4672626, 4672627, 4672629, 4672630, 4672631, 4672632, 4672633, 4672634, 4672635, 4672636, 4672638, 4672639, 4672640, 4672641, 4672642, 4672643, 4672645, 4672646, 4672647, 4672650, 4672652, 4672653, 4672654, 4672655, 4672656, 4672657, 4672658, 4672659, 4672660, 4672661, 4672662, 4672663, 4672664, 4672665, 4672666, 4672667, 4672668, 4672672, 4672673, 4672674, 4672675, 4672676, 4672677, 4672678, 4672679, 4672680, 4672681, 4672682, 4672684, 4672685, 4672686, 4672687, 4672688, 4672689, 4672690, 4672692, 4672693, 4672694, 4672695, 4672697, 4672698, 4672700, 4672701, 4672702, 4672703, 4672704, 4672705, 4672706, 4672708, 4672709, 4672710, 4672711, 4672712, 4672713, 4672714, 4672715, 4672716, 4672717, 4672718, 4672719, 4672720, 4672723, 4672724, 4672725, 4672726, 4672727, 4672730, 4672731, 4672732, 4672733, 4672734, 4672737, 4672738, 4672739, 4672740, 4672741, 4672742, 4672743, 4672744, 4672745, 4672746, 4672747, 4672748, 4672749, 4672750, 4672751, 4672752, 4672754, 4672755, 4672756, 4672757, 4672758, 4672759, 4672760, 4672761, 4672762, 4672764, 4672765, 4672766, 4672767, 4672768, 4799582, 4799583, 4799585, 4878410, 4878411, 4878412, 4878413, 4878414, 4878415, 4878416, 4878417, 4878418, 4878419, 4878422, 4878423, 4878424, 4878426, 4878427, 4878428, 4878429, 4878431, 4878433, 4878434, 4878436, 4878437, 4878439, 4878440, 4878441, 4878442, 4878443], false],
                // -- only the active students from the previous example
                [256048, 189, 33, [4672299, 4672300, 4672373, 4672374, 4672375, 4672376, 4672378, 4672379, 4672380, 4672381, 4672382, 4672383, 4672384, 4672387, 4672388, 4672389, 4672391, 4672392, 4672393, 4672394, 4672395, 4672397, 4672398, 4672400, 4672401, 4672402, 4672403, 4672404, 4672407, 4672408, 4672409, 4672410, 4672412, 4672413, 4672414, 4672415, 4672416, 4672417, 4672418, 4672419, 4672422, 4672424, 4672425, 4672426, 4672427, 4672428, 4672430, 4672431, 4672432, 4672433, 4672436, 4672437, 4672438, 4672441, 4672442, 4672443, 4672444, 4672445, 4672447, 4672448, 4672450, 4672451, 4672452, 4672453, 4672454, 4672455, 4672456, 4672457, 4672458, 4672459, 4672460, 4672462, 4672463, 4672464, 4672465, 4672466, 4672467, 4672469, 4672470, 4672471, 4672472, 4672474, 4672476, 4672477, 4672478, 4672479, 4672481, 4672482, 4672483, 4672484, 4672486, 4672487, 4672488, 4672489, 4672492, 4672493, 4672494, 4672495, 4672497, 4672498, 4672500, 4672501, 4672502, 4672503, 4672504, 4672505, 4672506, 4672507, 4672509, 4672510, 4672511, 4672512, 4672513, 4672514, 4672515, 4672516, 4672517, 4672519, 4672520, 4672521, 4672522, 4672523, 4672524, 4672525, 4672526, 4672527, 4672528, 4672529, 4672531, 4672532, 4672533, 4672534, 4672536, 4672537, 4672540, 4672541, 4672542, 4672543, 4672544, 4672545, 4672546, 4672547, 4672548, 4672549, 4672550, 4672551, 4672552, 4672553, 4672555, 4672556, 4672557, 4672558, 4672559, 4672560, 4672561, 4672564, 4672565, 4672566, 4672567, 4672568, 4672569, 4672570, 4672571, 4672572, 4672573, 4672576, 4672577, 4672578, 4672579, 4672580, 4672581, 4672582, 4672583, 4672584, 4672585, 4672586, 4672587, 4672588, 4672590, 4672591, 4672593, 4672595, 4672597, 4672598, 4672599, 4672600, 4672601, 4672602, 4672603, 4672604, 4672607, 4672608, 4672609, 4672610, 4672612, 4672613, 4672614, 4672615, 4672616, 4672617, 4672618, 4672619, 4672620, 4672621, 4672622, 4672623, 4672624, 4672625, 4672626, 4672627, 4672629, 4672630, 4672631, 4672632, 4672633, 4672634, 4672635, 4672636, 4672638, 4672639, 4672640, 4672641, 4672642, 4672643, 4672645, 4672646, 4672647, 4672650, 4672652, 4672653, 4672654, 4672655, 4672656, 4672657, 4672658, 4672659, 4672660, 4672661, 4672662, 4672663, 4672664, 4672665, 4672666, 4672667, 4672668, 4672672, 4672673, 4672674, 4672675, 4672676, 4672677, 4672678, 4672679, 4672680, 4672681, 4672682, 4672684, 4672685, 4672686, 4672687, 4672688, 4672689, 4672690, 4672692, 4672693, 4672694, 4672695, 4672697, 4672698, 4672700, 4672701, 4672702, 4672703, 4672704, 4672705, 4672706, 4672708, 4672709, 4672710, 4672711, 4672712, 4672713, 4672714, 4672715, 4672716, 4672717, 4672718, 4672719, 4672720, 4672723, 4672724, 4672725, 4672726, 4672727, 4672730, 4672731, 4672732, 4672733, 4672734, 4672737, 4672738, 4672739, 4672740, 4672741, 4672742, 4672743, 4672744, 4672745, 4672746, 4672747, 4672748, 4672749, 4672750, 4672751, 4672752, 4672754, 4672755, 4672756, 4672757, 4672758, 4672759, 4672760, 4672761, 4672762, 4672764, 4672765, 4672766, 4672767, 4672768, 4799582, 4799583, 4799585, 4878410, 4878411, 4878412, 4878413, 4878414, 4878415, 4878416, 4878417, 4878418, 4878419, 4878422, 4878423, 4878424, 4878426, 4878427, 4878428, 4878429, 4878431, 4878433, 4878434, 4878436, 4878437, 4878439, 4878440, 4878441, 4878442, 4878443], true],

            ]
        ]);
    }

}