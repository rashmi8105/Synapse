<?php

namespace Synapse\Migrations;

use Doctrine\DBAL\Migrations\AbstractMigration;
use Doctrine\DBAL\Schema\Schema;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
class Version20160304214920 extends AbstractMigration
{
    /**
     *
     * This migration script removes 'cohert' from all ebi_search queries, and 'cohert' from all org_search  queries
     *
     * @param Schema $schema
     */
    public function up(Schema $schema)
    {
        // this up() migration is auto-generated, please modify it to your needs

        $this->abortIf($this->connection->getDatabasePlatform()->getName() != 'mysql', 'Migration can only be executed safely on \'mysql\'.');

        /*$this->addSql(
            "UPDATE synapse.ebi_search
                SET query='\nselect\nSQL_CALC_FOUND_ROWS p.id,\np.id,\np.external_id,\np.firstname,\np.lastname,\np.username as email,\np.risk_level,\nitl.image_name as intent_imagename,\nitl.text as intent_text,\nrl.image_name as risk_imagename,\nrl.risk_text,\np.intent_to_leave as intent_leave,\n(count(distinct (lc.id))) as login_cnt,\n(\n	select\n	(case when (activity_type=\'N\')\n		then concat(DATE_FORMAT(activity_date,\'%m/%d/%y\'), \' - \',\'Note\')\n		when (activity_type=\'A\')\n	then concat(DATE_FORMAT(activity_date,\'%m/%d/%y\'), \' - \',\'Appointment\')\n		when (activity_type=\'C\')\n				then concat(DATE_FORMAT(activity_date,\'%m/%d/%y\'), \' - \',\'Contact\')\n		when (activity_type=\'E\')\n				then concat(DATE_FORMAT(activity_date,\'%m/%d/%y\'), \' - \',\'Email\')\n		when (activity_type=\'R\')\n				then concat(DATE_FORMAT(activity_date,\'%m/%d/%y\'), \' - \',\'Referral\')\n				else\n					concat(DATE_FORMAT(activity_date,\'%m/%d/%y\'), \' - \',\'Login\')\n	END) as new\n    from activity_log where id =  max(lc.id)\n) as last_activity ,\nops.status,\nitl.color_hex as intent_color,\nrl.color_hex as risk_color,\n1 as risk_flag,\nunique_people_this_faculty_member_can_see_risk_for.intent_to_leave as intent_flag,\nelv.list_name as class_level\nfrom person p\nLEFT JOIN org_person_student os on (os.person_id = p.id and os.organization_id = p.organization_id )        \njoin\n(\n   select person_id, max(intent_to_leave) as intent_to_leave\n   from\n   (\n      select\n      ocs.person_id, flags.intent_to_leave\n      from org_course_student ocs\n      join\n      (\n         select\n         ocf.org_courses_id, op.intent_to_leave\n         from org_course_faculty ocf\n         join org_courses oc on oc.id = ocf.org_courses_id and oc.deleted_at is null\n         join org_academic_terms oat on oat.id = oc.org_academic_terms_id and oat.deleted_at is null\n         join org_permissionset op on ocf.org_permissionset_id = op.id and op.deleted_at is null\n         where ocf.person_id = $\$personId$$\n         and ocf.deleted_at is null\n         and oat.end_date >= date(now())\n         and op.risk_indicator = 1\n         and op.accesslevel_ind_agg = 1\n      )\n      flags on flags.org_courses_id = ocs.org_courses_id and ocs.deleted_at is null\n      union\n      all\n      select\n      ogs.person_id, flags.intent_to_leave\n      from org_group_students ogs\n      join\n      (\n         select\n         ogf.org_group_id, op.intent_to_leave\n         from org_group_faculty ogf\n         join org_permissionset op on ogf.org_permissionset_id = op.id and op.deleted_at is null\n         where ogf.person_id = $\$personId$$\n         and ogf.deleted_at is null\n         and op.risk_indicator = 1\n         and op.accesslevel_ind_agg = 1\n      )\n      flags on flags.org_group_id = ogs.org_group_id and ogs.deleted_at is null\n   )\n   non_unique_people_this_faculty_member_can_see_risk_for\n   group by person_id\n)\nunique_people_this_faculty_member_can_see_risk_for on p.id = unique_people_this_faculty_member_can_see_risk_for.person_id\ninner join org_person_student ops on ops.person_id = p.id and ops.deleted_at is null\nleft join risk_level rl on p.risk_level = rl.id\nleft join activity_log lc ON (lc.person_id_student = p.id and lc.deleted_at is null) and lc.activity_type in (\'R\',\'A\',\'C\',\'N\',\'E\')\nleft join intent_to_leave itl on itl.id = p.intent_to_leave\nleft join person_ebi_metadata pem on (pem.person_id = p.id and pem.ebi_metadata_id= [EBI_METADATA_CLASSLEVEL_ID] )\nleft join ebi_metadata_list_values elv on (elv.list_value = pem.metadata_value and elv.ebi_metadata_id = [EBI_METADATA_CLASSLEVEL_ID] )\nwhere p.risk_level in ($\$risklevel$$)\nAND (p.last_contact_date < p.risk_update_date OR p.last_contact_date IS NULL)\nand p.deleted_at is null AND (os.status is null or os.status = 1) AND os.organization_id =  $\$orgId$$ and os.deleted_at is null\ngroup by p.id\n[ORDER_BY]\n[LIMIT]'
                WHERE query_key = 'My_High_priority_students_List';"
        );

        $this->addSql(
            "UPDATE synapse.ebi_search
                SET query='\nselect\nSQL_CALC_FOUND_ROWS p.id,\np.id,\np.firstname,\np.lastname,\np.risk_level,\np.external_id,\np.username as email,\nitl.image_name as intent_imagename,\nitl.text as intent_text,\nrl.image_name as risk_imagename,\nrl.risk_text,\np.intent_to_leave as intent_leave,\nlc.cnt as login_cnt,\np.last_activity,\nops.status,\nitl.color_hex as intent_color,\nrl.color_hex as risk_color,\n1 as risk_flag,\nunique_people_this_faculty_member_can_see_risk_for.intent_to_leave as intent_flag,\nelv.list_name as class_level\nfrom person p\nLEFT JOIN org_person_student os on (os.person_id = p.id and os.organization_id = p.organization_id )         \njoin\n(\n   select person_id, max(intent_to_leave) as intent_to_leave\n   from\n   (\n      select\n      ocs.person_id, flags.intent_to_leave\n      from org_course_student ocs\n      join\n      (\n         select\n         ocf.org_courses_id, op.intent_to_leave\n         from org_course_faculty ocf\n         join org_courses oc on oc.id = ocf.org_courses_id and oc.deleted_at is null\n         join org_academic_terms oat on oat.id = oc.org_academic_terms_id and oat.deleted_at is null\n         join org_permissionset op on ocf.org_permissionset_id = op.id and op.deleted_at is null\n         where ocf.person_id = $\$personId$$\n         and ocf.deleted_at is null\n         and oat.end_date >= date(now())\n         and op.risk_indicator = 1\n         and op.accesslevel_ind_agg = 1\n      )\n      flags on flags.org_courses_id = ocs.org_courses_id and ocs.deleted_at is null\n      union\n      all\n      select\n      ogs.person_id, flags.intent_to_leave\n      from org_group_students ogs\n      join\n      (\n         select\n         ogf.org_group_id, op.intent_to_leave\n         from org_group_faculty ogf\n         join org_permissionset op on ogf.org_permissionset_id = op.id and op.deleted_at is null\n         where ogf.person_id = $\$personId$$\n         and ogf.deleted_at is null\n         and op.risk_indicator = 1\n         and op.accesslevel_ind_agg = 1\n      )\n      flags on flags.org_group_id = ogs.org_group_id and ogs.deleted_at is null\n   )\n   non_unique_people_this_faculty_member_can_see_risk_for\n   group by person_id\n)\nunique_people_this_faculty_member_can_see_risk_for on p.id = unique_people_this_faculty_member_can_see_risk_for.person_id\nleft join risk_level rl on p.risk_level = rl.id\nleft join Logins_count lc on lc.person_id = p.id\njoin org_person_student ops on ops.person_id = p.id and ops.deleted_at is null\nleft join intent_to_leave itl on itl.id = p.intent_to_leave\nleft join person_ebi_metadata pem on ( pem.person_id = p.id and pem.ebi_metadata_id = [EBI_METADATA_CLASSLEVEL_ID] )\nleft join ebi_metadata_list_values elv on (elv.list_value = pem.metadata_value and elv.ebi_metadata_id = [EBI_METADATA_CLASSLEVEL_ID] )\nwhere (p.risk_level in ($\$risklevel$$) or p.risk_level is null)\nand p.deleted_at is null AND (os.status is null or os.status = 1) AND os.organization_id =  $\$orgId$$ and os.deleted_at is null\n[ORDER_BY]\n[LIMIT]'
                WHERE query_key = 'My_Total_students_List';"
        );

        $this->addSql(
            "UPDATE synapse.ebi_search
                SET query='\nselect\nSQL_CALC_FOUND_ROWS p.id,\np.id,\np.firstname,\np.lastname,\np.risk_level,\np.external_id,\np.username as email,\nitl.image_name as intent_imagename,\nitl.text as intent_text,\nrl.image_name as risk_imagename,\nrl.risk_text,\np.intent_to_leave as intent_leave,\nlc.cnt as login_cnt,\np.last_activity,\nops.status,\nitl.color_hex as intent_color,\nrl.color_hex as risk_color,\n1 as risk_flag,\nunique_people_this_faculty_member_can_see_risk_for.intent_to_leave as intent_flag,\nelv.list_name as class_level\nfrom person p\nLEFT JOIN org_person_student os on (os.person_id = p.id and os.organization_id = p.organization_id )        \njoin\n(\n   select person_id, max(intent_to_leave) as intent_to_leave\n   from\n   (\n      select\n      ocs.person_id, flags.intent_to_leave\n      from org_course_student ocs\n      join\n      (\n         select\n         ocf.org_courses_id, op.intent_to_leave\n         from org_course_faculty ocf\n         join org_courses oc on oc.id = ocf.org_courses_id and oc.deleted_at is null\n         join org_academic_terms oat on oat.id = oc.org_academic_terms_id and oat.deleted_at is null\n         join org_permissionset op on ocf.org_permissionset_id = op.id and op.deleted_at is null\n         where ocf.person_id = $\$personId$$\n         and ocf.deleted_at is null\n         and oat.end_date >= date(now())\n         and op.risk_indicator = 1\n         and op.accesslevel_ind_agg = 1\n      )\n      flags on flags.org_courses_id = ocs.org_courses_id and ocs.deleted_at is null\n      union\n      all\n      select\n      ogs.person_id, flags.intent_to_leave\n      from org_group_students ogs\n      join\n      (\n         select\n         ogf.org_group_id, op.intent_to_leave\n         from org_group_faculty ogf\n         join org_permissionset op on ogf.org_permissionset_id = op.id and op.deleted_at is null\n         where ogf.person_id = $\$personId$$\n         and ogf.deleted_at is null\n         and op.risk_indicator = 1\n         and op.accesslevel_ind_agg = 1\n      )\n      flags on flags.org_group_id = ogs.org_group_id and ogs.deleted_at is null\n   )\n   non_unique_people_this_faculty_member_can_see_risk_for\n   group by person_id\n)\nunique_people_this_faculty_member_can_see_risk_for on p.id = unique_people_this_faculty_member_can_see_risk_for.person_id\nleft join risk_level rl on p.risk_level = rl.id\nleft join Logins_count lc on lc.person_id = p.id\njoin org_person_student ops on ops.person_id = p.id and ops.deleted_at is null\nleft join intent_to_leave itl on itl.id = p.intent_to_leave\nleft join person_ebi_metadata pem on (pem.person_id = p.id and pem.ebi_metadata_id= [EBI_METADATA_CLASSLEVEL_ID] )\nleft join ebi_metadata_list_values elv on (elv.list_value = pem.metadata_value and elv.ebi_metadata_id = [EBI_METADATA_CLASSLEVEL_ID] )\nwhere p.deleted_at is null AND [RISK_LEVEL] AND (os.status is null or os.status = 1) AND os.organization_id =  $\$orgId$$ and os.deleted_at is null\n[ORDER_BY]\n[LIMIT]'
                WHERE query_key = 'My_Total_students_List_By_RiskLevel';"
        );

        $this->addSql(
            "UPDATE synapse.ebi_search
                SET query='select \n    r.id as \'referral_id\',\n    r.person_id_student,\n    p.firstname,\n    p.lastname,\n    p.risk_level,\n    p.intent_to_leave,\n    rml.image_name,\n    rml.risk_text,\n    lc.cnt as login_cnt,\n    p.last_activity\nFROM\n    referrals r\n        join\n    person p ON (r.person_id_student = p.id)\n        left join\n    referral_routing_rules rr ON (rr.activity_category_id = r.activity_category_id)\n        left join\n    organization_role orgr ON (r.organization_id = orgr.organization_id)\n        left join\n    risk_level rml ON (p.risk_level = rml.id)\n        left outer join\n    Logins_count lc ON (lc.person_id = r.person_id_student)\nwhere\n    r.deleted_at IS NULL AND r.status = \'O\'\n        and (r.person_id_assigned_to = $\$personid$$\n        or (rr.person_id = $\$personid$$\n        and r.person_id_assigned_to is null\n        and (rr.is_primary_coordinator = 0\n        or rr.is_primary_coordinator is null))\n        or (orgr.person_id = $\$personid$$\n        and r.person_id_assigned_to is null\n        and orgr.role_id = 1\n        and (rr.is_primary_coordinator = 1\n        AND rr.person_id IS null)))\n		AND r.organization_id = $\$orgid$$\ngroup by r.id -- maxscale route to server slave1 '
                WHERE query_key = 'My_Open_Referrals_Received_List';"
        );

        $this->addSql(
            "UPDATE synapse.ebi_search
                SET query='select r.id as \'referral_id\',r.person_id_student, p.firstname, p.lastname, p.risk_level, p.intent_to_leave,rml.image_name, rml.risk_text,lc.cnt as login_cnt, p.last_activity  FROM referrals r  join person p on (r.person_id_student = p.id ) LEFT join risk_level rml on (p.risk_level = rml.id) left outer join Logins_count lc on (lc.person_id = r.person_id_student)  where  r.deleted_at IS NULL AND (r.status = \'O\' or r.status=\'R\') and r.person_id_faculty = $\$personid$$ -- maxscale route to server slave1 '
                WHERE query_key ='My_Open_Referrals_Sent_List';"
        );*/

        $this->addSql("update synapse.org_search set query = replace(query,'p.cohert,','');");

    }

    /**
     * @param Schema $schema
     */
    public function down(Schema $schema)
    {
        // this down() migration is auto-generated, please modify it to your needs

    }
}
